const errorFunction = require("../utils/ErrorFunction");
const OracleDB = require("../services/database");
const { CheckNullInt, DateFormat, CheckNullFloat } = require("../utils/Helper");

module.exports = {
  async CM1AList(req, res) {
    try {
      let params = {};
      params.P_PERIOD_ID = CheckNullInt(req.body.PERIOD_ID);
      params.P_DEPARTMENT_ID = CheckNullInt(req.body.DEPARTMENT_ID);

      let ListQuery = `SELECT L.AUDIT_ORG_TYPE, RAOT.AUDIT_ORG_CHECK_NAME, L.BUDGET_TYPE_ID, RBT.BUDGET_SHORT_NAME, SUM(WORK_PEOPLE) WORK_PEOPLE, SUM(WORK_DAY) WORK_DAY, SUM(WORK_TIME) WORK_TIME,
      SUM(CASE WHEN FORM_TYPE_ID = 1 THEN 1 ELSE 0 END) DUGNELT, SUM(CASE WHEN FORM_TYPE_ID = 2 THEN 1 ELSE 0 END) TUUWER,
      SUM(CASE WHEN FORM_TYPE_ID = 1 AND L.AUDIT_PERCENT = 100 THEN 1 ELSE 0 END) DUGNELT_LAST, SUM(CASE WHEN FORM_TYPE_ID = 2 AND L.AUDIT_PERCENT = 100 THEN 1 ELSE 0 END) TUUWER_LAST,
      SUM(CASE WHEN REASON_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) REASON_TYPE_CNT,
      SUM(CASE WHEN CONCLUSION = 'Өөрчлөлтгүй' THEN 1 ELSE 0 END) UGUI_CNT,
      SUM(CASE WHEN CONCLUSION = 'Хязгаарлалттай Өөрчлөлттэй' THEN 1 ELSE 0 END) KHYAZGAARLALTTAI_CNT,
      SUM(CASE WHEN CONCLUSION = 'Татгалзсан Өөрчлөлттэй' THEN 1 ELSE 0 END) TATGALZSAN_CNT,
      SUM(CASE WHEN CONCLUSION = 'Сөрөг Өөрчлөлттэй' THEN 1 ELSE 0 END) SURUG_CNT
      FROM AUD_STAT.NEW_BM1_DATA BM1
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM1.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM1_LOG L ON BM1.ID = L.BM1_ID
      LEFT JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON L.BUDGET_TYPE_ID = RBT.BUDGET_TYPE_ID 
      LEFT JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON L.AUDIT_ORG_TYPE = RAOT.ID 
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = :P_DEPARTMENT_ID
      GROUP BY L.AUDIT_ORG_TYPE, RAOT.AUDIT_ORG_CHECK_NAME, L.BUDGET_TYPE_ID, RBT.BUDGET_SHORT_NAME
      ORDER BY L.AUDIT_ORG_TYPE, L.BUDGET_TYPE_ID
      `;
      const result = await OracleDB.simpleExecute(ListQuery, params);

      return res.send(result.rows);
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async CM4List(req, res) {
    try {
      let params = {};
      params.P_PERIOD_ID = CheckNullInt(req.body.PERIOD_ID);
      params.P_DEPARTMENT_ID = CheckNullInt(req.body.DEPARTMENT_ID);

      let ListQuery = `SELECT A.SALBAR_ANGILAL, A.ZAL_CNT, A.ZAL_AMOUNT,
      B.ZUW_CNT, B.ZUW_AMOUNT,
      C.ASH_CNT, C.ASH_AMOUNT,
      D.SSH_CNT, D.SSH_AMOUNT,
      E.TA_CNT, E.TA_AMOUNT,
      F.KHKH_CNT, F.KHKH_AMOUNT
      FROM (SELECT SALBAR_ANGILAL, COUNT(L.ID) ZAL_CNT, SUM(L.AMOUNT) ZAL_AMOUNT      
      FROM AUD_STAT.NEW_BM3_DATA BM3
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM3.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM3_LOG L ON BM3.ID = L.BM3_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL) A
      LEFT JOIN (SELECT SALBAR_ANGILAL, COUNT(L.ID) ZUW_CNT, SUM(L.AMOUNT) ZUW_AMOUNT      
      FROM AUD_STAT.NEW_BM4_DATA BM4
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM4.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM4_LOG L ON BM4.ID = L.BM4_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL ) B ON A.SALBAR_ANGILAL = B.SALBAR_ANGILAL
      LEFT JOIN (SELECT SALBAR_ANGILAL, COUNT(L.ID) ASH_CNT, SUM(L.AMOUNT) ASH_AMOUNT      
      FROM AUD_STAT.NEW_BM4_DATA BM5
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM5.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM5_LOG L ON BM5.ID = L.BM5_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL ) C ON A.SALBAR_ANGILAL = C.SALBAR_ANGILAL
      LEFT JOIN (SELECT SALBAR_ANGILAL, COUNT(L.ID) SSH_CNT, SUM(L.AMOUNT) SSH_AMOUNT      
      FROM AUD_STAT.NEW_BM4_DATA BM6
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM6.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM6_LOG L ON BM6.ID = L.BM6_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL ) D ON A.SALBAR_ANGILAL = D.SALBAR_ANGILAL
      LEFT JOIN (SELECT SALBAR_ANGILAL, COUNT(L.ID) TA_CNT, SUM(L.AMOUNT) TA_AMOUNT      
      FROM AUD_STAT.NEW_BM7_DATA BM7
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM7.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM7_LOG L ON BM7.ID = L.BM7_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL ) E ON A.SALBAR_ANGILAL = E.SALBAR_ANGILAL
      LEFT JOIN (SELECT SALBAR_ANGILAL, COUNT(L.ID) KHKH_CNT, SUM(L.AMOUNT) KHKH_AMOUNT      
      FROM AUD_STAT.NEW_BM4_DATA BM8
      INNER JOIN AUD_STAT.STAT_AUDIT SA ON BM8.STAT_AUDIT_ID = SA.ID
      LEFT JOIN AUD_STAT.NEW_BM8_LOG L ON BM8.ID = L.BM8_ID
      WHERE SA.IS_ACTIVE = 1 AND SA.PERIOD_ID = :P_PERIOD_ID AND SA.DEPARTMENT_ID = NVL(:P_DEPARTMENT_ID, SA.DEPARTMENT_ID)
      GROUP BY L.SALBAR_ANGILAL
      ORDER BY L.SALBAR_ANGILAL ) F ON A.SALBAR_ANGILAL = F.SALBAR_ANGILAL
      `;
      const result = await OracleDB.simpleExecute(ListQuery, params);
      console.log(params, "params");
      return res.send(result.rows);
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
};

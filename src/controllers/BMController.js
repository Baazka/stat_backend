const errorFunction = require("../utils/ErrorFunction");
const OracleDB = require("../services/database");
const { CheckNullInt, DateFormat, CheckNullFloat } = require("../utils/Helper");

const ListTeamRole = `SELECT AT.AUDITOR_ID, SU.USER_NAME, AT.ROLE_ID, R.ROLE_NAME FROM AUD_STAT.STAT_AUDIT_TEAM AT
LEFT JOIN AUD_REG.SYSTEM_USER SU ON AT.AUDITOR_ID = SU.USER_ID
LEFT JOIN AUD_STAT.REF_ROLE R ON AT.ROLE_ID = R.ID
WHERE AT.IS_ACTIVE = 1 AND AT.STAT_AUDIT_ID = :P_ID`;
const AuditStatus = `SELECT P.ID, SA.STATUS, SU.USER_NAME, SU.USER_CODE, 
SU1.USER_ID APPROVED_FIRST_ID, SU1.USER_NAME APPROVED_FIRST_NAME, SU1.USER_CODE APPROVED_FIRST_CODE, P.APPROVED_FIRST_DATE,
SU2.USER_ID APPROVED_SECOND_ID, SU2.USER_NAME APPROVED_SECOND_NAME, SU2.USER_CODE APPROVED_SECOND_CODE, P.APPROVED_SECOND_DATE,
SU3.USER_ID APPROVED_THIRD_ID, SU3.USER_NAME APPROVED_THIRD_NAME, SU3.USER_CODE APPROVED_THIRD_CODE, P.APPROVED_THIRD_DATE
FROM AUD_STAT.STAT_AUDIT SA
LEFT JOIN AUD_STAT.STAT_AUDIT_PROCESS P ON SA.ID = P.STAT_AUDIT_ID
LEFT JOIN AUD_REG.SYSTEM_USER SU ON P.SAVED_BY = SU.USER_ID
LEFT JOIN AUD_REG.SYSTEM_USER SU1 ON P.APPROVED_FIRST_ID = SU1.USER_ID
LEFT JOIN AUD_REG.SYSTEM_USER SU2 ON P.APPROVED_SECOND_ID = SU2.USER_ID
LEFT JOIN AUD_REG.SYSTEM_USER SU3 ON P.APPROVED_THIRD_ID = SU3.USER_ID
WHERE SA.ID = :P_ID`;
const FindIDs = `SELECT DEPARTMENT_ID, FP.PERIOD_ID FROM AUD_STAT.STAT_AUDIT SA 
INNER JOIN AUD_STAT.REF_PERIOD P ON SA.PERIOD_ID = P.ID
INNER JOIN FAS_ADMIN.REF_PERIOD FP ON P.PERIOD_YEAR = FP.YEAR_LABEL
WHERE SA.ID = :P_ID`;
const CheckSchedule = `SELECT COUNT(*) CNT FROM AUD_STAT.STAT_AUDIT_TEAM WHERE IS_ACTIVE = 1 AND STAT_AUDIT_ID = :STAT_AUDIT_ID AND AUDITOR_ID = :AUDITOR_ID`;

module.exports = {
  async BM1List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
      BM1.ID,
      L.ID LOG_ID,
      FAS.FAS_AUDIT_ID AUDIT_ID,
      FAS.AUDIT_TYPE_ID,
      NVL(L.AUDIT_TYPE_NAME, FAS.AUDIT_TYPE_NAME) AUDIT_TYPE_NAME,
      NVL(L.AUDIT_NAME, FAS.AUDIT_NAME) AUDIT_NAME,
      NVL(L.AUDIT_CODE, FAS.AUDIT_CODE) AUDIT_CODE,
      NVL(L.ENT_NAME, FAS.ENT_NAME) ENT_NAME,
      NVL(L.ORG_REGISTER_NO, FAS.ORG_REGISTER_NO) ORG_REGISTER_NO,
      NVL(L.BUDGET_TYPE_ID, FAS.BUDGET_TYPE_ID) BUDGET_TYPE_ID,
      NVL(L.BUDGET_SHORT_NAME, FAS.BUDGET_SHORT_NAME) BUDGET_SHORT_NAME,
      NVL(L.SALBAR_ANGILAL, FAS.SALBAR_ANGILAL) SALBAR_ANGILAL,
      'Үгүй' HOSLUULAH,
      'Хуулийн дагуу' UNDESLEL,
      NVL(L.FORM_TYPE_ID, FAS.FORM_TYPE_ID) FORM_TYPE_ID,
      NVL(L.AUDIT_TYPE, FAS.AUDIT_TYPE) AUDIT_TYPE,      
      NVL(L.REASON_TYPE_ID, FAS.REASON_TYPE_ID) REASON_TYPE_ID,
      NVL(L.REASON_TYPE_NAME, FAS.REASON_TYPE_NAME) REASON_TYPE_NAME,
      NVL(L.REASON_TYPE_NAME, FAS.REASON_TYPE_NAME) REASON_TYPE_NAME,
      --TATGALZSAN
      BM1.IS_EXPERT_ATTEND,
      BM1.IS_PRESS_REPORT,
      BM1.WORK_PEOPLE,
      BM1.WORK_DAY,
      BM1.WORK_TIME,
      NVL(L.TUL_BENEFIT, FAS.TUL_BENEFIT) TUL_BENEFIT,
      NVL(L.TOD_BENEFIT, FAS.TOD_BENEFIT) TOD_BENEFIT,
      NVL(L.AUDIT_ORG_TYPE, FAS.AUDIT_ORG_TYPE) AUDIT_ORG_TYPE,      
      NVL(L.AUDIT_ORG_CHECK_NAME, FAS.AUDIT_ORG_CHECK_NAME) AUDIT_ORG_CHECK_NAME,
      NVL(L.DEPARTMENT_NAME, FAS.DEPARTMENT_NAME) DEPARTMENT_NAME,
      NVL(L.CHECK_DEPARTMENT_NAME, FAS.CHECK_DEPARTMENT_NAME) CHECK_DEPARTMENT_NAME,
      NVL(L.AUDIT_DEPARTMENT_NAME, FAS.AUDIT_DEPARTMENT_NAME) AUDIT_DEPARTMENT_NAME,
      NVL(L.AUDIT_LEAD, FAS.AUDITOR_LEAD) AUDIT_LEAD,
      NVL(L.AUDIT_MEMBER, FAS.AUDITOR_LEAD) AUDIT_MEMBER

      FROM AUD_STAT.NEW_BM1_DATA BM1
      LEFT JOIN AUD_STAT.NEW_BM1_LOG L ON BM1.ID = L.BM1_ID
      RIGHT JOIN (SELECT 
      --NEW TABLE ID
      FA.ID FAS_AUDIT_ID,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RDI.IND_VALUE_NAME SALBAR_ANGILAL, 
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      C.TUL_BENEFIT,
      NVL(CASE WHEN(CASE WHEN FA.STATUS = 1 AND FA.PERIOD_ID > 3 THEN 3 ELSE FA.AUDIT_FORM_TYPE END) = 1 THEN A.SUO ELSE B.SUO END, 0) + 
      NVL(CASE WHEN(CASE WHEN FA.STATUS = 1 AND FA.PERIOD_ID > 3 THEN 3 ELSE FA.AUDIT_FORM_TYPE END) = 1 THEN D.ZAL_AMOUNT ELSE D1.ZAL_AMOUNT_SAMPLE END, 0) TOD_BENEFIT, 
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      (CASE WHEN RCD.DEPARTMENT_NAME IS NOT NULL AND FA.AUDIT_ORG_TYPE = 1 AND FA.AUDIT_CHECK_DEP_ID IN (101,102) THEN RD.DEPARTMENT_NAME||' - '||RCD.DEPARTMENT_NAME ELSE RD.DEPARTMENT_NAME END) DEPARTMENT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      (SELECT LISTAGG(SU.USER_NAME,', ') WITHIN GROUP(ORDER BY FATD.ID) FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD INNER JOIN AUD_REG.SYSTEM_USER SU ON FATD.AUDITOR_ID = SU.USER_ID WHERE FATD.FAS_AUDIT_ID = FA.ID AND FATD.ROLE_ID = 2 AND FATD.IS_ACTIVE = 1 GROUP BY FATD.FAS_AUDIT_ID) AUDITOR_LEAD,
      (SELECT LISTAGG(SU.USER_NAME,', ') WITHIN GROUP(ORDER BY FATD.ID) FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD INNER JOIN AUD_REG.SYSTEM_USER SU ON FATD.AUDITOR_ID = SU.USER_ID WHERE FATD.FAS_AUDIT_ID = FA.ID AND FATD.ROLE_ID = 3 AND FATD.IS_ACTIVE = 1 GROUP BY FATD.FAS_AUDIT_ID) AUDITOR_MEMBER,
      FA.PERIOD_ID,
      FA.REASON_TYPE_ID,
      RT.NAME REASON_TYPE_NAME,
      DECODE((CASE WHEN FA.STATUS = 1 AND FA.PERIOD_ID > 3 THEN 3 ELSE FA.AUDIT_FORM_TYPE END), 2, NULL, CN.CONCLUSION) CONCLUSION
      FROM FAS_ADMIN.FAS_AUDIT FA
      
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID 
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      LEFT JOIN FAS_ADMIN.REF_CHECK_DEPARTMENT RCD ON FA.AUDIT_CHECK_DEP_ID = RCD.DEPARTMENT_ID AND FA.CHECK_DEPARTMENT_ID = RCD.ID
      LEFT JOIN FAS_ADMIN.FAS_DOCUMENT_DATA FDD2 ON FA.ID = FDD2.FAS_AUDIT_ID AND FDD2.IS_ACTIVE = 1 AND FDD2.IND_ID IN (71,346,437,534)
      LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE RDI ON FDD2.IND_VALUE = RDI.ID
      LEFT JOIN FAS_ADMIN.REF_REASON_TYPE RT ON FA.REASON_TYPE_ID = RT.ID
      LEFT JOIN (SELECT FAS_AUDIT_ID, LISTAGG(IND_VALUE_TEXT, ' ') 
      WITHIN GROUP (ORDER BY FAS_AUDIT_ID) AS CONCLUSION
      FROM FAS_ADMIN.FAS_DOCUMENT_DATA  
      WHERE DOCUMENT_ID IN (26, 132) AND IND_VALUE IS NOT NULL
      GROUP BY FAS_AUDIT_ID) CN ON FA.ID = CN.FAS_AUDIT_ID
      --START UR UGUUJ
      LEFT JOIN (SELECT FAS_AUDIT_ID, SUM(CASE WHEN INDICATOR_ID IN(228, 672) THEN BENEFIT_RESULT END) TUL_BENEFIT, SUM(CASE WHEN INDICATOR_ID IN (229, 673) THEN BENEFIT_RESULT END) TUL_BUS_BENEFIT 
      FROM FAS_ADMIN.FAS_AUDIT_BENEFIT_DATA
      GROUP BY FAS_AUDIT_ID) C ON FA.ID = C.FAS_AUDIT_ID
      LEFT JOIN (SELECT A.FAS_AUDIT_ID, SUM(CASE WHEN A.UR_UGUUJ_TYPE = 320 THEN A.AMOUNT END) SUO, SUM(CASE WHEN A.UR_UGUUJ_TYPE = 321 THEN A.AMOUNT END) SBUO FROM 
      (SELECT A.FAS_AUDIT_ID,A.ID,A.AMOUNT, C.UR_UGUUJ_TYPE           
      FROM FAS_ADMIN.FAS_DOC_5_1 A
         INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
         INNER JOIN FAS_ADMIN.FAS_DOC_5_6 C ON A.ID = C.ID_5_1 AND C.IS_CLAUSE = 0
         WHERE A.IS_ACTIVE = 1 AND A.IS_ZALRUULAH = 284 AND B.UR_UGUUJ = 283
      UNION ALL
      SELECT A.FAS_AUDIT_ID,A.ID,A.AMOUNT, B.UR_UGUUJ_TYPE          
      FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
      INNER JOIN FAS_ADMIN.FAS_DOC_5_6 B ON A.ID = B.ID_5_1 AND B.IS_CLAUSE = 1
      WHERE A.IS_ACTIVE = 1 AND A.UR_UGUUJ = 283
      ) A
         GROUP BY A.FAS_AUDIT_ID) A ON FA.ID = A.FAS_AUDIT_ID
         
      LEFT JOIN (SELECT A.FAS_AUDIT_ID, SUM(A.AMOUNT) ZAL_AMOUNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_2 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_5_6 C ON A.ID = C.ID_5_1
        WHERE A.IS_ACTIVE = 1 AND A.IS_ZALRUULAH = 283 AND B.UR_UGUUJ = 283
      GROUP BY A.FAS_AUDIT_ID) D ON FA.ID = D.FAS_AUDIT_ID
      LEFT JOIN (SELECT A.FAS_AUDIT_ID, SUM(ZAL_AMOUNT_SAMPLE) ZAL_AMOUNT_SAMPLE FROM
      (SELECT A.FAS_AUDIT_ID, A.AMOUNT ZAL_AMOUNT_SAMPLE,A.ID
        FROM FAS_ADMIN.FAS_DOC_5_2_SAMPLE A
        WHERE A.IS_ACTIVE = 1 AND A.UR_UGUUJ = 283
        UNION ALL  
      SELECT  A.FAS_AUDIT_ID, A.AMOUNT ZAL_AMOUNT_SAMPLE, A.ID
      FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
      WHERE A.IS_ACTIVE = 1 AND A.UR_UGUUJ = 283 
      ) A
      INNER JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE C ON A.ID = C.ID_5_2
      GROUP BY A.FAS_AUDIT_ID) D1 ON FA.ID = D1.FAS_AUDIT_ID
        
      LEFT JOIN (SELECT A.FAS_AUDIT_ID, SUM(CASE WHEN A.UR_UGUUJ_TYPE = 320 THEN A.AMOUNT END) SUO, SUM(CASE WHEN A.UR_UGUUJ_TYPE = 321 THEN A.AMOUNT END) SBUO FROM 
      (SELECT A.FAS_AUDIT_ID, A.ID, A.AMOUNT, B.UR_UGUUJ_TYPE
      FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
      INNER JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE B ON A.ID = B.ID_5_5 AND B.IS_CLAUSE = 0
      WHERE A.IS_ACTIVE = 1 AND A.UR_UGUUJ = 283 
      UNION ALL
      SELECT A.FAS_AUDIT_ID,A.ID, A.AMOUNT, B.UR_UGUUJ_TYPE          
      FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
      INNER JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE B ON A.ID = B.ID_5_5 AND B.IS_CLAUSE = 1
      WHERE A.IS_ACTIVE = 1 AND A.UR_UGUUJ = 283 
      ) A
      GROUP BY A.FAS_AUDIT_ID) B ON FA.ID = B.FAS_AUDIT_ID
      --END UR UGUUJ
      
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID 
      `;
      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM1.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM1.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID 
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM1IU(req, res) {
    try {
      const queryBM1 = `BEGIN AUD_STAT.NEW_BM1_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_IS_EXPERT_ATTEND, :P_IS_PRESS_REPORT, :P_WORK_PEOPLE, :P_WORK_DAY, :P_WORK_TIME, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_SALBAR_ANGILAL, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_DEPARTMENT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_AUDIT_LEAD, :P_AUDIT_MEMBER, :P_REASON_TYPE_ID, :P_REASON_TYPE_NAME, :P_CONCLUSION, :P_TUL_BENEFIT, :P_TOD_BENEFIT, :P_CREATED_BY); END;`;

      let data = [];
      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_IS_EXPERT_ATTEND: CheckNullInt(element.IS_EXPERT_ATTEND),
              P_IS_PRESS_REPORT: CheckNullInt(element.IS_PRESS_REPORT),
              P_WORK_PEOPLE: CheckNullInt(element.WORK_PEOPLE),
              P_WORK_DAY: CheckNullInt(element.WORK_DAY),
              P_WORK_TIME: CheckNullInt(element.WORK_TIME),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_SALBAR_ANGILAL: element.SALBAR_ANGILAL,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_DEPARTMENT_NAME: element.DEPARTMENT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,
              P_AUDIT_LEAD: element.AUDIT_LEAD,
              P_REASON_TYPE_ID: CheckNullInt(element.REASON_TYPE_ID),
              P_REASON_TYPE_NAME: element.REASON_TYPE_NAME,
              P_CONCLUSION: element.CONCLUSION,
              P_TUL_BENEFIT: CheckNullFloat(element.TUL_BENEFIT),
              P_TOD_BENEFIT: CheckNullFloat(element.TOD_BENEFIT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM1, data);
      //const resultLog = await OracleDB.multipleExecute(queryBM1log, log);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM2List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT
      BM2.ID,
      L.ID LOG_ID,
      FAS.FAS_AUDIT_ID AUDIT_ID,
      FAS.AUDIT_TYPE_ID,
     NVL(L.AUDIT_TYPE_ID, FAS.AUDIT_TYPE_ID) AUDIT_TYPE_ID,
     NVL(L.AUDIT_TYPE_NAME, FAS.AUDIT_TYPE_NAME) AUDIT_TYPE_NAME,
     NVL(L.AUDIT_NAME, FAS.AUDIT_NAME) AUDIT_NAME,
     NVL(L.AUDIT_CODE, FAS.AUDIT_CODE) AUDIT_CODE,
      'Үгүй' HOSLUULAH,
      'Хуулийн дагуу' UNDESLEL,
     NVL(L.FORM_TYPE_ID, FAS.FORM_TYPE_ID) FORM_TYPE_ID,
     NVL(L.AUDIT_TYPE, FAS.AUDIT_TYPE) AUDIT_TYPE,
     NVL(L.AUDIT_ORG_TYPE, FAS.AUDIT_ORG_TYPE) AUDIT_ORG_TYPE,
     NVL(L.AUDIT_ORG_CHECK_NAME, FAS.AUDIT_ORG_CHECK_NAME) AUDIT_ORG_CHECK_NAME,
     NVL(L.ENT_NAME, FAS.ENT_NAME) ENT_NAME,
     NVL(L.ORG_REGISTER_NO, FAS.ORG_REGISTER_NO) ORG_REGISTER_NO,
     NVL(L.BUDGET_TYPE_ID, FAS.BUDGET_TYPE_ID) BUDGET_TYPE_ID,
     NVL(L.BUDGET_SHORT_NAME, FAS.BUDGET_SHORT_NAME) BUDGET_SHORT_NAME,
     NVL(L.SALBAR_ANGILAL, FAS.SALBAR_ANGILAL) SALBAR_ANGILAL,
     NVL(L.DEPARTMENT_NAME, FAS.DEPARTMENT_NAME) DEPARTMENT_NAME,
     NVL(L.CHECK_DEPARTMENT_NAME, FAS.CHECK_DEPARTMENT_NAME) CHECK_DEPARTMENT_NAME,
     NVL(L.AUDIT_DEPARTMENT_NAME, FAS.AUDIT_DEPARTMENT_NAME) AUDIT_DEPARTMENT_NAME,
      'Шалгагдагч этгээд' ORG_TYPE

      FROM AUD_STAT.NEW_BM2_DATA BM2
      LEFT JOIN AUD_STAT.NEW_BM2_LOG L ON BM2.ID = L.BM2_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      'Үгүй' HOSLUULAH,
      'Хуулийн дагуу' UNDESLEL,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RDI.IND_VALUE_NAME SALBAR_ANGILAL,
      (CASE WHEN RCD.DEPARTMENT_NAME IS NOT NULL AND FA.AUDIT_ORG_TYPE = 1 AND FA.AUDIT_CHECK_DEP_ID IN (101,102) THEN RD.DEPARTMENT_NAME||' - '||RCD.DEPARTMENT_NAME ELSE RD.DEPARTMENT_NAME END) DEPARTMENT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      'Шалгагдагч этгээд' ORG_TYPE
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      LEFT JOIN FAS_ADMIN.REF_CHECK_DEPARTMENT RCD ON FA.AUDIT_CHECK_DEP_ID = RCD.DEPARTMENT_ID AND FA.CHECK_DEPARTMENT_ID = RCD.ID
      LEFT JOIN FAS_ADMIN.FAS_DOCUMENT_DATA FDD2 ON FA.ID = FDD2.FAS_AUDIT_ID AND FDD2.IS_ACTIVE = 1 AND FDD2.IND_ID IN (71,346,437,534)
      LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE RDI ON FDD2.IND_VALUE = RDI.ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID 
      `;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM2.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM2.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID 
                    \n ORDER BY FAS.FAS_AUDIT_ID`;
      //console.log(ListQuery, "ListQuery");

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM2IU(req, res) {
    try {
      const queryBM2 = `BEGIN AUD_STAT.NEW_BM2_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_SALBAR_ANGILAL, :P_DEPARTMENT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_CREATED_BY); END;`;

      let data = [];
      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_SALBAR_ANGILAL: element.SALBAR_ANGILAL,
              P_DEPARTMENT_NAME: element.DEPARTMENT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM2, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM3List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM3.ID,
        L.ID LOG_ID,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.IS_ZALRUULAH,
        FAS.IS_ZALRUULAH_NAME,
        FAS.ALD_SHORT_DESC,
        FAS.AMOUNT,
        FAS.IS_SUB_ERROR_CONFLICT,
        FAS.IS_SUB_ERROR_CONFLICT_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME
      FROM AUD_STAT.NEW_BM3_DATA BM3
      LEFT JOIN AUD_STAT.NEW_BM3_LOG L ON BM3.ID = L.BM3_ID
      RIGHT JOIN (
      SELECT 
        FA.ID FAS_AUDIT_ID,
        RAT.AUDIT_TYPE_ID,
        RAT.AUDIT_TYPE_NAME,
        NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
        FA.AUDIT_CODE,
        RFT.FORM_TYPE_ID,
        RFT.FORM_TYPE_NAME AUDIT_TYPE,
        FA.AUDIT_ORG_TYPE,
        RAOT.AUDIT_ORG_CHECK_NAME,
        NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
        AO.ORG_REGISTER_NO,
        RBT.BUDGET_TYPE_ID,
        RBT.BUDGET_SHORT_NAME,
        RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
        RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
        A.IS_ZALRUULAH,
        A.IS_ZALRUULAH_NAME,
        A.SHORT_DESC ALD_SHORT_DESC,
        A.AMOUNT,
        A.IS_SUB_ERROR_CONFLICT,
        A.IS_SUB_ERROR_CONFLICT_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME
        FROM FAS_ADMIN.FAS_AUDIT FA
        INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
        INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
        LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID 
        INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
        INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
        INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
        INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
        INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
        INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
        INNER JOIN (
          --tuuwer 52
SELECT A.FAS_AUDIT_ID, A.ID, A.SHORT_DESC, A.AMOUNT, 283 IS_ZALRUULAH, 'Тийм' IS_ZALRUULAH_NAME, 
A.UR_UGUUJ, V1.IND_VALUE_NAME UR_UGUUJ_NAME, B.UR_UGUUJ_TYPE, V2.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME, A.IS_SUB_ERROR_CONFLICT, V3.IND_VALUE_NAME IS_SUB_ERROR_CONFLICT_NAME
FROM FAS_ADMIN.FAS_DOC_5_2_SAMPLE A
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE B ON A.ID = B.ID_5_2
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.UR_UGUUJ = V1.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON B.UR_UGUUJ_TYPE = V2.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON A.IS_SUB_ERROR_CONFLICT = V3.ID
WHERE A.IS_ACTIVE = 1 AND A.IS_ERROR_CONFLICT = 285
UNION
--tuuwer 55
SELECT A.FAS_AUDIT_ID, A.ID, A.SHORT_DESC, A.AMOUNT, 284 IS_ZALRUULAH, 'Үгүй' IS_ZALRUULAH_NAME, 
A.UR_UGUUJ, V1.IND_VALUE_NAME UR_UGUUJ_NAME, B.UR_UGUUJ_TYPE, V2.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME, A.IS_SUB_ERROR_CONFLICT, V3.IND_VALUE_NAME IS_SUB_ERROR_CONFLICT_NAME
FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE B ON A.ID = B.ID_5_5 AND B.IS_CLAUSE = 0
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.UR_UGUUJ = V1.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON B.UR_UGUUJ_TYPE = V2.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON A.IS_SUB_ERROR_CONFLICT = V3.ID
WHERE A.IS_ACTIVE = 1 AND A.IS_ERROR_CONFLICT = 285 AND A.SOLUTION != 341
UNION
--TH
SELECT A.FAS_AUDIT_ID, A.ID, A.SHORT_DESC, A.AMOUNT, 284 IS_ZALRUULAH, 'Үгүй' IS_ZALRUULAH_NAME, 
A.UR_UGUUJ, V1.IND_VALUE_NAME UR_UGUUJ_NAME, 
NVL(B.UR_UGUUJ_TYPE, B1.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, 
NVL(V2.IND_VALUE_NAME, V4.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME, 
A.IS_SUB_ERROR_CONFLICT, V3.IND_VALUE_NAME IS_SUB_ERROR_CONFLICT_NAME
FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 B ON A.ID = B.ID_5_1 AND B.IS_CLAUSE = 1
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE B1 ON A.ID = B1.ID_5_5 AND B1.IS_CLAUSE = 1
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.UR_UGUUJ = V1.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON B.UR_UGUUJ_TYPE = V2.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON A.IS_SUB_ERROR_CONFLICT = V3.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON B1.UR_UGUUJ_TYPE = V4.ID
WHERE A.IS_ACTIVE = 1 AND A.IS_ERROR_CONFLICT = 285 AND A.SOLUTION IS NOT NULL
UNION
--dugnult 55
SELECT A.FAS_AUDIT_ID, A.ID, A.SHORT_DESC, A.AMOUNT, A.IS_ZALRUULAH, V5.IND_VALUE_NAME IS_ZALRUULAH_NAME, 
B.UR_UGUUJ, V1.IND_VALUE_NAME UR_UGUUJ_NAME, 
D.UR_UGUUJ_TYPE, V2.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME, 
NULL, NULL
FROM FAS_ADMIN.FAS_DOC_5_1 A
INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 D ON A.ID = D.ID_5_1 AND D.IS_CLAUSE = 0
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.UR_UGUUJ = V1.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON D.UR_UGUUJ_TYPE = V2.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V5 ON A.IS_ZALRUULAH = V5.ID
WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341 AND A.IS_ERROR_CONFLICT = 285 
UNION
--DUGNELT 52
SELECT A.FAS_AUDIT_ID, A.ID, A.SHORT_DESC, A.AMOUNT, A.IS_ZALRUULAH, V5.IND_VALUE_NAME IS_ZALRUULAH_NAME, 
B.UR_UGUUJ, V1.IND_VALUE_NAME UR_UGUUJ_NAME, 
D.UR_UGUUJ_TYPE, V2.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME, 
B.IS_SUB_ERROR_CONFLICT, V3.IND_VALUE_NAME IS_SUB_ERROR_CONFLICT_NAME
FROM FAS_ADMIN.FAS_DOC_5_1 A
INNER JOIN FAS_ADMIN.FAS_DOC_5_2 B ON A.ID = B.ID_5_1
LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 D ON A.ID = D.ID_5_1 AND D.IS_CLAUSE = 0
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.UR_UGUUJ = V1.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON D.UR_UGUUJ_TYPE = V2.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON B.IS_SUB_ERROR_CONFLICT = V3.ID
LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V5 ON A.IS_ZALRUULAH = V5.ID
WHERE A.IS_ACTIVE = 1 AND A.IS_ERROR_CONFLICT = 285
          ) A ON FA.ID = A.FAS_AUDIT_ID
        WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM3.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM3.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID 
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM3IU(req, res) {
    try {
      const queryBM3 = `BEGIN AUD_STAT.NEW_BM3_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_IS_ZALRUULAH, :P_IS_ZALRUULAH_NAME, :P_ALD_SHORT_DESC, :P_AMOUNT, :P_IS_SUB_ERROR_CONFLICT, :P_IS_SUB_ERROR_CONFLICT_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,
              P_IS_ZALRUULAH: CheckNullInt(element.IS_ZALRUULAH),
              P_IS_ZALRUULAH_NAME: element.IS_ZALRUULAH_NAME,
              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),
              P_IS_SUB_ERROR_CONFLICT: CheckNullInt(
                element.IS_SUB_ERROR_CONFLICT
              ),
              P_IS_SUB_ERROR_CONFLICT_NAME: element.IS_SUB_ERROR_CONFLICT_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.AUDIT_DEPARTMENT_NAME),
              P_UR_UGUUJ_TYPE_NAME: element.AUDIT_DEPARTMENT_NAME,
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM3, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM4List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM4.ID,
        L.ID LOG_ID,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        FAS.PERIOD_ID,
        FAS.YEAR_LABEL,
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.ID_7_1, FAS.ALD_SHORT_DESC,
        FAS.SOLUTION, FAS.SOLUTION_NAME,
        FAS.AMOUNT,
        FAS.IS_ERROR_CONFLICT, FAS.IS_ERROR_CONFLICT_NAME,
        FAS.SOLUTION_ERROR, FAS.SOLUTION_ERROR_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME,
        FAS.AKT_DATE, FAS.AKT_NO, FAS.SHORT_DESC,
        FAS.COMPLETION_DATE,
        FAS.USER_ID, FAS.AUDITOR_NAME, FAS.AUDITOR_CODE, FAS.MO_DATE, FAS.MO_AMOUNT,
        FAS.ACCOUNT_TYPE, FAS.ACCOUNT_TYPE_NAME, FAS.FULL_NAME, FAS.EXEC_DATE, FAS.NEXT_AMOUNT, FAS.DATE_CNT, CASE WHEN FAS.DATE_CNT > 0 THEN 'Хугацаа болоогүй' WHEN FAS.DATE_CNT < 0 THEN 'Хугацаа хэтэрсэн' ELSE NULL END TIME_STATUS        
      FROM AUD_STAT.NEW_BM4_DATA BM4
      LEFT JOIN AUD_STAT.NEW_BM4_LOG L ON BM4.ID = L.BM4_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      FA.PERIOD_ID,
      RP.YEAR_LABEL,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      A.ID ID_7_1, A.ALD_SHORT_DESC,
        A.SOLUTION, A.SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, A.IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, A.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME,
        A.AKT_DATE, A.AKT_NO, A.SHORT_DESC,
        A.COMPLETION_DATE,
        A.USER_ID, A.AUDITOR_NAME, A.AUDITOR_CODE, A.MO_DATE, A.MO_AMOUNT,
        A.ACCOUNT_TYPE, A.ACCOUNT_TYPE_NAME, A.FULL_NAME, A.EXEC_DATE, A.NEXT_AMOUNT, A.DATE_CNT
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      INNER JOIN FAS_ADMIN.REF_PERIOD RP ON FA.PERIOD_ID = RP.PERIOD_ID
      INNER JOIN (
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION != 341
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        NVL(E1.UR_UGUUJ_TYPE, E.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, NVL(V3.IND_VALUE_NAME, V9.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E1 ON A.ID = E1.ID_5_1 AND E1.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON E1.UR_UGUUJ_TYPE = V3.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION IS NOT NULL
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        B.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        B.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        B.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_2 D ON A.ID = D.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E ON A.ID = E.ID_5_1 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON B.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON B.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341
        ) A ON FA.ID = A.FAS_AUDIT_ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND A.SOLUTION = 315
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM4.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM4.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID AND BM4.ID_7_1 = FAS.ID_7_1
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM4IU(req, res) {
    try {
      const queryBM4 = `BEGIN AUD_STAT.NEW_BM4_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_ID_7_1, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_ALD_SHORT_DESC, :P_SOLUTION, :P_SOLUTION_NAME, :P_AMOUNT, :P_IS_ERROR_CONFLICT, :P_IS_ERROR_CONFLICT_NAME, :P_SOLUTION_ERROR, :P_SOLUTION_ERROR_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_AKT_DATE, :P_AKT_NO, :P_SHORT_DESC, :P_COMPLETION_DATE, :P_USER_ID, :P_AUDITOR_NAME, :P_AUDITOR_CODE, :P_MO_DATE, :P_MO_AMOUNT, :P_ACCOUNT_TYPE, :P_ACCOUNT_TYPE_NAME, :P_FULL_NAME, :P_EXEC_DATE, :P_NEXT_AMOUNT, :P_DATE_CNT, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_ID_7_1: CheckNullInt(element.ID_7_1),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,

              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_SOLUTION: CheckNullInt(element.SOLUTION),
              P_SOLUTION_NAME: element.SOLUTION_NAME,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),

              P_IS_ERROR_CONFLICT: CheckNullInt(element.IS_ERROR_CONFLICT),
              P_IS_ERROR_CONFLICT_NAME: element.IS_ERROR_CONFLICT_NAME,
              P_SOLUTION_ERROR: CheckNullInt(element.SOLUTION_ERROR),
              P_SOLUTION_ERROR_NAME: element.SOLUTION_ERROR_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.UR_UGUUJ_TYPE),
              P_UR_UGUUJ_TYPE_NAME: element.UR_UGUUJ_TYPE_NAME,

              P_AKT_DATE: element.AKT_DATE,
              P_AKT_NO: element.AKT_NO,
              P_SHORT_DESC: element.SHORT_DESC,
              P_COMPLETION_DATE: element.COMPLETION_DATE,
              P_USER_ID: CheckNullInt(element.USER_ID),
              P_AUDITOR_NAME: element.AUDITOR_NAME,
              P_AUDITOR_CODE: element.AUDITOR_CODE,
              P_MO_DATE: element.MO_DATE,
              P_MO_AMOUNT: CheckNullFloat(element.MO_AMOUNT),
              P_ACCOUNT_TYPE: CheckNullInt(element.ACCOUNT_TYPE),
              P_ACCOUNT_TYPE_NAME: element.ACCOUNT_TYPE_NAME,
              P_FULL_NAME: element.FULL_NAME,
              P_EXEC_DATE: element.EXEC_DATE,
              P_NEXT_AMOUNT: CheckNullFloat(element.NEXT_AMOUNT),
              P_DATE_CNT: CheckNullInt(element.DATE_CNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM4, data);
      const resultLog = await OracleDB.multipleExecute(queryBM4log, log);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM5List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM5.ID,
        L.ID LOG_ID,
        BM5.IS_TRANSFER,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        FAS.PERIOD_ID,
        FAS.YEAR_LABEL,
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.ID_7_1, FAS.ALD_SHORT_DESC,
        FAS.SOLUTION, FAS.SOLUTION_NAME,
        FAS.AMOUNT,
        FAS.IS_ERROR_CONFLICT, FAS.IS_ERROR_CONFLICT_NAME,
        FAS.SOLUTION_ERROR, FAS.SOLUTION_ERROR_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME,
        FAS.AKT_DATE, FAS.AKT_NO, FAS.SHORT_DESC,
        FAS.COMPLETION_DATE,
        FAS.USER_ID, FAS.AUDITOR_NAME, FAS.AUDITOR_CODE, FAS.MO_DATE, FAS.MO_AMOUNT,
        FAS.ACCOUNT_TYPE, FAS.ACCOUNT_TYPE_NAME, FAS.FULL_NAME, FAS.EXEC_DATE, FAS.NEXT_AMOUNT, FAS.DATE_CNT, CASE WHEN FAS.DATE_CNT > 0 THEN 'Хугацаа болоогүй' WHEN FAS.DATE_CNT < 0 THEN 'Хугацаа хэтэрсэн' ELSE NULL END TIME_STATUS
      FROM AUD_STAT.NEW_BM5_DATA BM5
      LEFT JOIN AUD_STAT.NEW_BM5_LOG L ON BM5.ID = L.BM5_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      FA.PERIOD_ID,
      RP.YEAR_LABEL,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      A.ID ID_7_1, A.ALD_SHORT_DESC,
        A.SOLUTION, A.SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, A.IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, A.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME,
        A.AKT_DATE, A.AKT_NO, A.SHORT_DESC,
        A.COMPLETION_DATE,
        A.USER_ID, A.AUDITOR_NAME, A.AUDITOR_CODE, A.MO_DATE, A.MO_AMOUNT,
        A.ACCOUNT_TYPE, A.ACCOUNT_TYPE_NAME, A.FULL_NAME, A.EXEC_DATE, A.NEXT_AMOUNT, A.DATE_CNT
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      INNER JOIN FAS_ADMIN.REF_PERIOD RP ON FA.PERIOD_ID = RP.PERIOD_ID
      INNER JOIN (
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION != 341
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        NVL(E1.UR_UGUUJ_TYPE, E.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, NVL(V3.IND_VALUE_NAME, V9.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E1 ON A.ID = E1.ID_5_1 AND E1.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON E1.UR_UGUUJ_TYPE = V3.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION IS NOT NULL
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        B.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        B.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        B.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_2 D ON A.ID = D.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E ON A.ID = E.ID_5_1 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON B.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON B.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341
        ) A ON FA.ID = A.FAS_AUDIT_ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND A.SOLUTION = 316
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM5.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM5.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID AND BM5.ID_7_1 = FAS.ID_7_1
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM5IU(req, res) {
    try {
      const queryBM5 = `BEGIN AUD_STAT.NEW_BM5_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_ID_7_1, :P_IS_TRANSFER, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_ALD_SHORT_DESC, :P_SOLUTION, :P_SOLUTION_NAME, :P_AMOUNT, :P_IS_ERROR_CONFLICT, :P_IS_ERROR_CONFLICT_NAME, :P_SOLUTION_ERROR, :P_SOLUTION_ERROR_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_AKT_DATE, :P_AKT_NO, :P_SHORT_DESC, :P_COMPLETION_DATE, :P_USER_ID, :P_AUDITOR_NAME, :P_AUDITOR_CODE, :P_MO_DATE, :P_MO_AMOUNT, :P_ACCOUNT_TYPE, :P_ACCOUNT_TYPE_NAME, :P_FULL_NAME, :P_EXEC_DATE, :P_NEXT_AMOUNT, :P_DATE_CNT, :P_CREATED_BY); END;`;

      let data = [];
      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_ID_7_1: CheckNullInt(element.ID_7_1),
              P_IS_TRANSFER: CheckNullInt(element.IS_TRANSFER),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,

              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,

              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_SOLUTION: CheckNullInt(element.SOLUTION),
              P_SOLUTION_NAME: element.SOLUTION_NAME,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),

              P_IS_ERROR_CONFLICT: CheckNullInt(element.IS_ERROR_CONFLICT),
              P_IS_ERROR_CONFLICT_NAME: element.IS_ERROR_CONFLICT_NAME,
              P_SOLUTION_ERROR: CheckNullInt(element.SOLUTION_ERROR),
              P_SOLUTION_ERROR_NAME: element.SOLUTION_ERROR_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.UR_UGUUJ_TYPE),
              P_UR_UGUUJ_TYPE_NAME: element.UR_UGUUJ_TYPE_NAME,

              P_AKT_DATE: element.AKT_DATE,
              P_AKT_NO: element.AKT_NO,
              P_SHORT_DESC: element.SHORT_DESC,
              P_COMPLETION_DATE: element.COMPLETION_DATE,
              P_USER_ID: CheckNullInt(element.USER_ID),
              P_AUDITOR_NAME: element.AUDITOR_NAME,
              P_AUDITOR_CODE: element.AUDITOR_CODE,
              P_MO_DATE: element.MO_DATE,
              P_MO_AMOUNT: CheckNullFloat(element.MO_AMOUNT),
              P_ACCOUNT_TYPE: CheckNullInt(element.ACCOUNT_TYPE),
              P_ACCOUNT_TYPE_NAME: element.ACCOUNT_TYPE_NAME,
              P_FULL_NAME: element.FULL_NAME,
              P_EXEC_DATE: element.EXEC_DATE,
              P_NEXT_AMOUNT: CheckNullFloat(element.NEXT_AMOUNT),
              P_DATE_CNT: CheckNullInt(element.DATE_CNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM5, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM6List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;
      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM6.ID,
        L.ID LOG_ID,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        FAS.PERIOD_ID,
        FAS.YEAR_LABEL,
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.ID_7_1, FAS.ALD_SHORT_DESC,
        FAS.SOLUTION, FAS.SOLUTION_NAME,
        FAS.AMOUNT,
        FAS.IS_ERROR_CONFLICT, FAS.IS_ERROR_CONFLICT_NAME,
        FAS.SOLUTION_ERROR, FAS.SOLUTION_ERROR_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME,
        FAS.AKT_DATE, FAS.AKT_NO, FAS.SHORT_DESC,
        FAS.COMPLETION_DATE,
        FAS.USER_ID, FAS.AUDITOR_NAME, FAS.AUDITOR_CODE, FAS.MO_DATE, FAS.MO_AMOUNT,
        FAS.ACCOUNT_TYPE, FAS.ACCOUNT_TYPE_NAME, FAS.FULL_NAME, FAS.EXEC_DATE, FAS.NEXT_AMOUNT, FAS.DATE_CNT, CASE WHEN FAS.DATE_CNT > 0 THEN 'Хугацаа болоогүй' WHEN FAS.DATE_CNT < 0 THEN 'Хугацаа хэтэрсэн' ELSE NULL END TIME_STATUS     
      FROM AUD_STAT.NEW_BM6_DATA BM6
      LEFT JOIN AUD_STAT.NEW_BM6_LOG L ON BM6.ID = L.BM6_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      FA.PERIOD_ID,
      RP.YEAR_LABEL,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      A.ID ID_7_1, A.ALD_SHORT_DESC,
        A.SOLUTION, A.SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, A.IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, A.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME,
        A.AKT_DATE, A.AKT_NO, A.SHORT_DESC,
        A.COMPLETION_DATE,
        A.USER_ID, A.AUDITOR_NAME, A.AUDITOR_CODE, A.MO_DATE, A.MO_AMOUNT,
        A.ACCOUNT_TYPE, A.ACCOUNT_TYPE_NAME, A.FULL_NAME, A.EXEC_DATE, A.NEXT_AMOUNT, A.DATE_CNT
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      INNER JOIN FAS_ADMIN.REF_PERIOD RP ON FA.PERIOD_ID = RP.PERIOD_ID
      INNER JOIN (
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION != 341
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        NVL(E1.UR_UGUUJ_TYPE, E.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, NVL(V3.IND_VALUE_NAME, V9.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E1 ON A.ID = E1.ID_5_1 AND E1.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON E1.UR_UGUUJ_TYPE = V3.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION IS NOT NULL
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        B.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        B.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        B.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_2 D ON A.ID = D.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E ON A.ID = E.ID_5_1 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON B.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON B.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341
        ) A ON FA.ID = A.FAS_AUDIT_ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND A.SOLUTION = 318
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM6.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM6.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID AND BM6.ID_7_1 = FAS.ID_7_1
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM6IU(req, res) {
    try {
      const queryBM6 = `BEGIN AUD_STAT.NEW_BM6_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_ID_7_1, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_ALD_SHORT_DESC, :P_SOLUTION, :P_SOLUTION_NAME, :P_AMOUNT, :P_IS_ERROR_CONFLICT, :P_IS_ERROR_CONFLICT_NAME, :P_SOLUTION_ERROR, :P_SOLUTION_ERROR_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_AKT_DATE, :P_AKT_NO, :P_SHORT_DESC, :P_COMPLETION_DATE, :P_USER_ID, :P_AUDITOR_NAME, :P_AUDITOR_CODE, :P_MO_DATE, :P_MO_AMOUNT, :P_ACCOUNT_TYPE, :P_ACCOUNT_TYPE_NAME, :P_FULL_NAME, :P_EXEC_DATE, :P_NEXT_AMOUNT, :P_DATE_CNT, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_ID_7_1: CheckNullInt(element.ID_7_1),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,

              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_SOLUTION: CheckNullInt(element.SOLUTION),
              P_SOLUTION_NAME: element.SOLUTION_NAME,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),

              P_IS_ERROR_CONFLICT: CheckNullInt(element.IS_ERROR_CONFLICT),
              P_IS_ERROR_CONFLICT_NAME: element.IS_ERROR_CONFLICT_NAME,
              P_SOLUTION_ERROR: CheckNullInt(element.SOLUTION_ERROR),
              P_SOLUTION_ERROR_NAME: element.SOLUTION_ERROR_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.UR_UGUUJ_TYPE),
              P_UR_UGUUJ_TYPE_NAME: element.UR_UGUUJ_TYPE_NAME,

              P_AKT_DATE: element.AKT_DATE,
              P_AKT_NO: element.AKT_NO,
              P_SHORT_DESC: element.SHORT_DESC,
              P_COMPLETION_DATE: element.COMPLETION_DATE,
              P_USER_ID: CheckNullInt(element.USER_ID),
              P_AUDITOR_NAME: element.AUDITOR_NAME,
              P_AUDITOR_CODE: element.AUDITOR_CODE,
              P_MO_DATE: element.MO_DATE,
              P_MO_AMOUNT: CheckNullFloat(element.MO_AMOUNT),
              P_ACCOUNT_TYPE: CheckNullInt(element.ACCOUNT_TYPE),
              P_ACCOUNT_TYPE_NAME: element.ACCOUNT_TYPE_NAME,
              P_FULL_NAME: element.FULL_NAME,
              P_EXEC_DATE: element.EXEC_DATE,
              P_NEXT_AMOUNT: CheckNullFloat(element.NEXT_AMOUNT),
              P_DATE_CNT: CheckNullInt(element.DATE_CNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM6, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM7List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM7.ID,   
        L.ID LOG_ID,     
        BM7.IS_TRANSFER,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        FAS.PERIOD_ID,
        FAS.YEAR_LABEL,
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.ID_7_1, FAS.ALD_SHORT_DESC,
        FAS.SOLUTION, FAS.SOLUTION_NAME,
        FAS.AMOUNT,
        FAS.IS_ERROR_CONFLICT, FAS.IS_ERROR_CONFLICT_NAME,
        FAS.SOLUTION_ERROR, FAS.SOLUTION_ERROR_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME,
        FAS.AKT_DATE, FAS.AKT_NO, FAS.SHORT_DESC,
        FAS.COMPLETION_DATE,
        FAS.USER_ID, FAS.AUDITOR_NAME, FAS.AUDITOR_CODE, FAS.MO_DATE, FAS.MO_AMOUNT,
        FAS.ACCOUNT_TYPE, FAS.ACCOUNT_TYPE_NAME, FAS.FULL_NAME, FAS.EXEC_DATE, FAS.NEXT_AMOUNT, FAS.DATE_CNT, CASE WHEN FAS.DATE_CNT > 0 THEN 'Хугацаа болоогүй' WHEN FAS.DATE_CNT < 0 THEN 'Хугацаа хэтэрсэн' ELSE NULL END TIME_STATUS
      FROM AUD_STAT.NEW_BM7_DATA BM7
      LEFT JOIN AUD_STAT.NEW_BM7_LOG L ON BM7.ID = L.BM7_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      FA.PERIOD_ID,
      RP.YEAR_LABEL,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      A.ID ID_7_1, A.ALD_SHORT_DESC,
        A.SOLUTION, A.SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, A.IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, A.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME,
        A.AKT_DATE, A.AKT_NO, A.SHORT_DESC,
        A.COMPLETION_DATE,
        A.USER_ID, A.AUDITOR_NAME, A.AUDITOR_CODE, A.MO_DATE, A.MO_AMOUNT,
        A.ACCOUNT_TYPE, A.ACCOUNT_TYPE_NAME, A.FULL_NAME, A.EXEC_DATE, A.NEXT_AMOUNT, A.DATE_CNT
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      INNER JOIN FAS_ADMIN.REF_PERIOD RP ON FA.PERIOD_ID = RP.PERIOD_ID
      INNER JOIN (
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION != 341
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        NVL(E1.UR_UGUUJ_TYPE, E.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, NVL(V3.IND_VALUE_NAME, V9.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E1 ON A.ID = E1.ID_5_1 AND E1.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON E1.UR_UGUUJ_TYPE = V3.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION IS NOT NULL
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        B.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        B.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        B.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_2 D ON A.ID = D.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E ON A.ID = E.ID_5_1 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON B.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON B.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341
        ) A ON FA.ID = A.FAS_AUDIT_ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND A.SOLUTION = 317
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM7.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM7.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID AND BM7.ID_7_1 = FAS.ID_7_1
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM7IU(req, res) {
    try {
      const queryBM7 = `BEGIN AUD_STAT.NEW_BM7_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_ID_7_1, :P_IS_TRANSFER, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_ALD_SHORT_DESC, :P_SOLUTION, :P_SOLUTION_NAME, :P_AMOUNT, :P_IS_ERROR_CONFLICT, :P_IS_ERROR_CONFLICT_NAME, :P_SOLUTION_ERROR, :P_SOLUTION_ERROR_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_AKT_DATE, :P_AKT_NO, :P_SHORT_DESC, :P_COMPLETION_DATE, :P_USER_ID, :P_AUDITOR_NAME, :P_AUDITOR_CODE, :P_MO_DATE, :P_MO_AMOUNT, :P_ACCOUNT_TYPE, :P_ACCOUNT_TYPE_NAME, :P_FULL_NAME, :P_EXEC_DATE, :P_NEXT_AMOUNT, :P_DATE_CNT, :P_CREATED_BY); END;`;

      let data = [];
      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_ID_7_1: CheckNullInt(element.ID_7_1),
              P_IS_TRANSFER: CheckNullInt(element.IS_TRANSFER),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,

              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_SOLUTION: CheckNullInt(element.SOLUTION),
              P_SOLUTION_NAME: element.SOLUTION_NAME,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),

              P_IS_ERROR_CONFLICT: CheckNullInt(element.IS_ERROR_CONFLICT),
              P_IS_ERROR_CONFLICT_NAME: element.IS_ERROR_CONFLICT_NAME,
              P_SOLUTION_ERROR: CheckNullInt(element.SOLUTION_ERROR),
              P_SOLUTION_ERROR_NAME: element.SOLUTION_ERROR_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.UR_UGUUJ_TYPE),
              P_UR_UGUUJ_TYPE_NAME: element.UR_UGUUJ_TYPE_NAME,

              P_AKT_DATE: element.AKT_DATE,
              P_AKT_NO: element.AKT_NO,
              P_SHORT_DESC: element.SHORT_DESC,
              P_COMPLETION_DATE: element.COMPLETION_DATE,
              P_USER_ID: CheckNullInt(element.USER_ID),
              P_AUDITOR_NAME: element.AUDITOR_NAME,
              P_AUDITOR_CODE: element.AUDITOR_CODE,
              P_MO_DATE: element.MO_DATE,
              P_MO_AMOUNT: CheckNullFloat(element.MO_AMOUNT),
              P_ACCOUNT_TYPE: CheckNullInt(element.ACCOUNT_TYPE),
              P_ACCOUNT_TYPE_NAME: element.ACCOUNT_TYPE_NAME,
              P_FULL_NAME: element.FULL_NAME,
              P_EXEC_DATE: element.EXEC_DATE,
              P_NEXT_AMOUNT: CheckNullFloat(element.NEXT_AMOUNT),
              P_DATE_CNT: CheckNullInt(element.DATE_CNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM7, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM8List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT 
        BM8.ID,
        L.ID LOG_ID,
        BM8.IS_TRANSFER,
        BM8.TRANSFER_AMOUNT, 
        BM8.TRANSFER_DESC, 
        BM8.TRANSFER_ORG, 
        BM8.TRANSFER_DOC_NO, 
        BM8.PERSON_POSITION, 
        BM8.LAW_FULL_AMOUNT, 
        BM8.LAW_UNDER_AMOUNT, 
        BM8.LAW_REJECTED_AMOUNT,
        FAS.FAS_AUDIT_ID AUDIT_ID,
        FAS.PERIOD_ID,
        FAS.YEAR_LABEL,
        FAS.AUDIT_TYPE_ID,
        FAS.AUDIT_TYPE_NAME,
        FAS.AUDIT_NAME,
        FAS.AUDIT_CODE,
        FAS.FORM_TYPE_ID,
        FAS.AUDIT_TYPE,
        FAS.AUDIT_ORG_TYPE,
        FAS.AUDIT_ORG_CHECK_NAME,
        FAS.ENT_NAME,
        FAS.ORG_REGISTER_NO,
        FAS.BUDGET_TYPE_ID,
        FAS.BUDGET_SHORT_NAME,
        FAS.CHECK_DEPARTMENT_NAME,
        FAS.AUDIT_DEPARTMENT_NAME,
        FAS.ID_7_1, FAS.ALD_SHORT_DESC,
        FAS.SOLUTION, FAS.SOLUTION_NAME,
        FAS.AMOUNT,
        FAS.IS_ERROR_CONFLICT, FAS.IS_ERROR_CONFLICT_NAME,
        FAS.SOLUTION_ERROR, FAS.SOLUTION_ERROR_NAME,
        FAS.UR_UGUUJ, FAS.UR_UGUUJ_NAME,
        FAS.UR_UGUUJ_TYPE, FAS.UR_UGUUJ_TYPE_NAME,
        FAS.AKT_DATE, FAS.AKT_NO, FAS.SHORT_DESC,
        FAS.COMPLETION_DATE,
        FAS.USER_ID, FAS.AUDITOR_NAME, FAS.AUDITOR_CODE, FAS.MO_DATE, FAS.MO_AMOUNT,
        FAS.ACCOUNT_TYPE, FAS.ACCOUNT_TYPE_NAME, FAS.FULL_NAME, FAS.EXEC_DATE, FAS.NEXT_AMOUNT, FAS.DATE_CNT, CASE WHEN FAS.DATE_CNT > 0 THEN 'Хугацаа болоогүй' WHEN FAS.DATE_CNT < 0 THEN 'Хугацаа хэтэрсэн' ELSE NULL END TIME_STATUS
      FROM AUD_STAT.NEW_BM8_DATA BM8
      LEFT JOIN AUD_STAT.NEW_BM8_LOG L ON BM8.ID = L.BM8_ID
      RIGHT JOIN (SELECT
      FA.ID FAS_AUDIT_ID,
      FA.PERIOD_ID,
      RP.YEAR_LABEL,
      RAT.AUDIT_TYPE_ID,
      RAT.AUDIT_TYPE_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ||' - '|| RAT.AUDIT_TYPE_NAME AUDIT_NAME,
      FA.AUDIT_CODE,
      RFT.FORM_TYPE_ID,
      RFT.FORM_TYPE_NAME AUDIT_TYPE,
      FA.AUDIT_ORG_TYPE,
      RAOT.AUDIT_ORG_CHECK_NAME,
      NVL(EN.PERIOD5_NAME, NVL(EN.PERIOD4_NAME, NVL(EN.PERIOD3_NAME, AE.ENT_NAME))) ENT_NAME,
      AO.ORG_REGISTER_NO,
      RBT.BUDGET_TYPE_ID,
      RBT.BUDGET_SHORT_NAME,
      RD.DEPARTMENT_NAME AS CHECK_DEPARTMENT_NAME,
      RD1.DEPARTMENT_NAME AS AUDIT_DEPARTMENT_NAME,
      A.ID ID_7_1, A.ALD_SHORT_DESC,
        A.SOLUTION, A.SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, A.IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, A.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, A.UR_UGUUJ_NAME,
        A.UR_UGUUJ_TYPE, A.UR_UGUUJ_TYPE_NAME,
        A.AKT_DATE, A.AKT_NO, A.SHORT_DESC,
        A.COMPLETION_DATE,
        A.USER_ID, A.AUDITOR_NAME, A.AUDITOR_CODE, A.MO_DATE, A.MO_AMOUNT,
        A.ACCOUNT_TYPE, A.ACCOUNT_TYPE_NAME, A.FULL_NAME, A.EXEC_DATE, A.NEXT_AMOUNT, A.DATE_CNT
      FROM FAS_ADMIN.FAS_AUDIT FA
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON FA.ENT_ID = AE.ENT_ID
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID
      LEFT JOIN FAS_ADMIN.ENTITY_NAME EN ON FA.ENT_ID = EN.ENT_ID
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_TYPE RAT ON FA.AUDIT_TYPE = RAT.AUDIT_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_FORM_TYPE RFT ON FA.AUDIT_FORM_TYPE = RFT.FORM_TYPE_ID
      INNER JOIN FAS_ADMIN.REF_AUDIT_ORG_TYPE RAOT ON FA.AUDIT_ORG_TYPE = RAOT.ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON FA.USER_DEPARTMENT_ID = RD.DEPARTMENT_ID
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD1 ON FA.AUDIT_CHECK_DEP_ID = RD1.DEPARTMENT_ID
      INNER JOIN FAS_ADMIN.REF_PERIOD RP ON FA.PERIOD_ID = RP.PERIOD_ID
      INNER JOIN (
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_5_SAMPLE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_5
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION != 341
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        A.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        A.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        A.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        NVL(E1.UR_UGUUJ_TYPE, E.UR_UGUUJ_TYPE) UR_UGUUJ_TYPE, NVL(V3.IND_VALUE_NAME, V9.IND_VALUE_NAME) UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1_CLAUSE A
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1_CLAUSE
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6_SAMPLE E ON A.ID = E.ID_5_5 AND E.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E1 ON A.ID = E1.ID_5_1 AND E1.IS_CLAUSE = 1
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON A.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON A.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V3 ON E1.UR_UGUUJ_TYPE = V3.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON A.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND A.SOLUTION IS NOT NULL
        UNION
        SELECT A.FAS_AUDIT_ID, C.ID, A.SHORT_DESC ALD_SHORT_DESC,
        B.SOLUTION, V1.IND_VALUE_NAME SOLUTION_NAME,
        A.AMOUNT,
        A.IS_ERROR_CONFLICT, V2.IND_VALUE_NAME IS_ERROR_CONFLICT_NAME,
        B.SOLUTION_ERROR, V10.SOLUTION_ERROR_NAME,
        B.UR_UGUUJ, V8.IND_VALUE_NAME UR_UGUUJ_NAME,
        E.UR_UGUUJ_TYPE UR_UGUUJ_TYPE, V9.IND_VALUE_NAME UR_UGUUJ_TYPE_NAME,
        C.AKT_DATE, C.AKT_NO, C.SHORT_DESC,
        C.COMPLETION_DATE,
        SU.USER_ID, SU.USER_NAME AUDITOR_NAME, SU.USER_CODE AUDITOR_CODE, M.MO_DATE, M.AMOUNT MO_AMOUNT,
        C.ACCOUNT_TYPE, V4.IND_VALUE_NAME ACCOUNT_TYPE_NAME,
        SUBSTR(C.LASTNAME,1,1)||'.'||C.FIRSTNAME FULL_NAME,
        EL.EXEC_DATE, A.AMOUNT - M.AMOUNT NEXT_AMOUNT, C.COMPLETION_DATE - EL.EXEC_DATE DATE_CNT
        FROM FAS_ADMIN.FAS_DOC_5_1 A
        INNER JOIN FAS_ADMIN.FAS_DOC_5_5 B ON A.ID = B.ID_5_1
        INNER JOIN FAS_ADMIN.FAS_DOC_7_1 C ON A.ID = C.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_2 D ON A.ID = D.ID_5_1
        LEFT JOIN FAS_ADMIN.FAS_DOC_5_6 E ON A.ID = E.ID_5_1 AND E.IS_CLAUSE = 0
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V1 ON B.SOLUTION = V1.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V2 ON A.IS_ERROR_CONFLICT = V2.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V8 ON B.UR_UGUUJ = V8.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V9 ON E.UR_UGUUJ_TYPE = V9.ID
        LEFT JOIN FAS_ADMIN.REF_SOLUTION_ERROR V10 ON B.SOLUTION_ERROR = V10.ID
        LEFT JOIN FAS_ADMIN.REF_DOCUMENT_INDICATOR_VALUE V4 ON C.ACCOUNT_TYPE = V4.ID
        LEFT JOIN FAS_ADMIN.AKT_MONITORING M ON C.ID = M.SEVEN_ONE_ID AND M.IS_ACTIVE = 1
        LEFT JOIN (SELECT SEVEN_ONE_ID,  MAX(EXEC_DATE) EXEC_DATE  
      FROM FAS_ADMIN.AKT_EXECUTION_LIST 
      WHERE IS_ACTIVE = 1 AND PERIOD_TYPE = 1 
      GROUP BY SEVEN_ONE_ID) EL ON C.ID = EL.SEVEN_ONE_ID
        LEFT JOIN AUD_REG.SYSTEM_USER SU ON M.CREATED_BY = SU.USER_ID
        WHERE A.IS_ACTIVE = 1 AND B.SOLUTION != 341
        ) A ON FA.ID = A.FAS_AUDIT_ID
      WHERE FA.IS_ACTIVE = 1 AND AE.IS_ACTIVE = 1 AND A.SOLUTION = 319
      AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;

      if (!isCheckSchedule) {
        if (
          req.body.USER_TYPE_NAME === "ADMIN" ||
          req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
          req.body.USER_TYPE_NAME === "STAT_ADMIN"
        ) {
        } else {
          params.P_USER_ID = parseInt(req.body.USER_ID, 10);
          ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
        }
      }

      ListQuery += `\n AND FA.PERIOD_ID = :P_PERIOD_ID) FAS ON BM8.AUDIT_ID = FAS.FAS_AUDIT_ID AND BM8.AUDIT_TYPE_ID = FAS.AUDIT_TYPE_ID AND BM8.ID_7_1 = FAS.ID_7_1
                    \n ORDER BY FAS.FAS_AUDIT_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM8IU(req, res) {
    try {
      const queryBM8 = `BEGIN AUD_STAT.NEW_BM8_I_U(:P_ID, :P_AUDIT_ID, :P_AUDIT_TYPE_ID, :P_ID_7_1, :P_IS_TRANSFER, :P_TRANSFER_AMOUNT, :P_TRANSFER_DESC, :P_TRANSFER_ORG, :P_TRANSFER_DOC_NO, :P_PERSON_POSITION, :P_LAW_FULL_AMOUNT, :P_LAW_UNDER_AMOUNT, :P_LAW_REJECTED_AMOUNT, :P_LOG_ID, :P_AUDIT_TYPE_NAME, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_FORM_TYPE_ID, :P_AUDIT_TYPE, :P_AUDIT_ORG_TYPE, :P_AUDIT_ORG_CHECK_NAME, :P_ENT_NAME, :P_ORG_REGISTER_NO, :P_BUDGET_TYPE_ID, :P_BUDGET_SHORT_NAME, :P_CHECK_DEPARTMENT_NAME, :P_AUDIT_DEPARTMENT_NAME, :P_ALD_SHORT_DESC, :P_SOLUTION, :P_SOLUTION_NAME, :P_AMOUNT, :P_IS_ERROR_CONFLICT, :P_IS_ERROR_CONFLICT_NAME, :P_SOLUTION_ERROR, :P_SOLUTION_ERROR_NAME, :P_UR_UGUUJ, :P_UR_UGUUJ_NAME, :P_UR_UGUUJ_TYPE, :P_UR_UGUUJ_TYPE_NAME, :P_AKT_DATE, :P_AKT_NO, :P_SHORT_DESC, :P_COMPLETION_DATE, :P_USER_ID, :P_AUDITOR_NAME, :P_AUDITOR_CODE, :P_MO_DATE, :P_MO_AMOUNT, :P_ACCOUNT_TYPE, :P_ACCOUNT_TYPE_NAME, :P_FULL_NAME, :P_EXEC_DATE, :P_NEXT_AMOUNT, :P_DATE_CNT, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_AUDIT_ID: CheckNullInt(element.AUDIT_ID),
              P_AUDIT_TYPE_ID: CheckNullInt(element.AUDIT_TYPE_ID),
              P_ID_7_1: CheckNullInt(element.ID_7_1),
              P_IS_TRANSFER: CheckNullInt(element.IS_TRANSFER),
              P_TRANSFER_AMOUNT: CheckNullFloat(element.TRANSFER_AMOUNT),
              P_TRANSFER_DESC: element.TRANSFER_DESC,
              P_TRANSFER_ORG: element.TRANSFER_ORG,
              P_TRANSFER_DOC_NO: element.TRANSFER_DOC_NO,
              P_PERSON_POSITION: element.PERSON_POSITION,
              P_LAW_FULL_AMOUNT: CheckNullFloat(element.LAW_FULL_AMOUNT),
              P_LAW_UNDER_AMOUNT: CheckNullFloat(element.LAW_UNDER_AMOUNT),
              P_LAW_REJECTED_AMOUNT: CheckNullFloat(
                element.LAW_REJECTED_AMOUNT
              ),

              P_LOG_ID:
                element.LOG_ID != null ? parseInt(element.LOG_ID) : null,
              P_AUDIT_TYPE_NAME: element.AUDIT_TYPE_NAME,
              P_AUDIT_NAME: element.AUDIT_NAME,
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_FORM_TYPE_ID: CheckNullInt(element.FORM_TYPE_ID),
              P_AUDIT_TYPE: element.AUDIT_TYPE,
              P_AUDIT_ORG_TYPE: CheckNullInt(element.AUDIT_ORG_TYPE),
              P_AUDIT_ORG_CHECK_NAME: element.AUDIT_ORG_CHECK_NAME,
              P_ENT_NAME: element.ENT_NAME,
              P_ORG_REGISTER_NO: element.ORG_REGISTER_NO,
              P_BUDGET_TYPE_ID: CheckNullInt(element.BUDGET_TYPE_ID),
              P_BUDGET_SHORT_NAME: element.BUDGET_SHORT_NAME,
              P_CHECK_DEPARTMENT_NAME: element.CHECK_DEPARTMENT_NAME,
              P_AUDIT_DEPARTMENT_NAME: element.AUDIT_DEPARTMENT_NAME,
              P_ALD_SHORT_DESC: element.ALD_SHORT_DESC,
              P_SOLUTION: CheckNullInt(element.SOLUTION),
              P_SOLUTION_NAME: element.SOLUTION_NAME,
              P_AMOUNT: CheckNullFloat(element.AMOUNT),
              P_IS_ERROR_CONFLICT: CheckNullInt(element.IS_ERROR_CONFLICT),
              P_IS_ERROR_CONFLICT_NAME: element.IS_ERROR_CONFLICT_NAME,
              P_SOLUTION_ERROR: CheckNullInt(element.SOLUTION_ERROR),
              P_SOLUTION_ERROR_NAME: element.SOLUTION_ERROR_NAME,
              P_UR_UGUUJ: CheckNullInt(element.UR_UGUUJ),
              P_UR_UGUUJ_NAME: element.UR_UGUUJ_NAME,
              P_UR_UGUUJ_TYPE: CheckNullInt(element.AUDIT_DEPARTMENT_NAME),
              P_UR_UGUUJ_TYPE_NAME: element.AUDIT_DEPARTMENT_NAME,

              P_AKT_DATE: element.AKT_DATE,
              P_AKT_NO: element.AKT_NO,
              P_SHORT_DESC: element.SHORT_DESC,
              P_COMPLETION_DATE: element.COMPLETION_DATE,
              P_USER_ID: CheckNullInt(element.USER_ID),
              P_AUDITOR_NAME: element.AUDITOR_NAME,
              P_AUDITOR_CODE: element.AUDITOR_CODE,
              P_MO_DATE: element.MO_DATE,
              P_MO_AMOUNT: CheckNullFloat(element.MO_AMOUNT),
              P_ACCOUNT_TYPE: CheckNullInt(element.ACCOUNT_TYPE),
              P_ACCOUNT_TYPE_NAME: element.ACCOUNT_TYPE_NAME,
              P_FULL_NAME: element.FULL_NAME,
              P_EXEC_DATE: element.EXEC_DATE,
              P_NEXT_AMOUNT: CheckNullFloat(element.NEXT_AMOUNT),
              P_DATE_CNT: CheckNullInt(element.DATE_CNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM8, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      //const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};

      let ScheduleData = {
        STAT_AUDIT_ID: parseInt(req.body.ID, 10),
        AUDITOR_ID: parseInt(req.body.USER_ID, 10),
      };
      const resultCheckSchedule = await OracleDB.simpleExecute(
        CheckSchedule,
        ScheduleData
      );
      const isCheckSchedule =
        resultCheckSchedule.rows[0]?.CNT > 0 ? true : false;

      let ListQuery = `SELECT BM9.ID, BM9.PERIOD_ID, P.YEAR_LABEL, BM9.AUDIT_TYPE_ID, RAT.AUDIT_TYPE_NAME, BM9.AUDIT_NAME, BM9.AUDIT_CODE, BM9.DELIVERED_DATE, BM9.EXECUTION_DATE,  
      BM9.IS_ERROR_CONFLICT, ERROR_CONFLICT_NAME, BM9.SHORT_DESC, BM9.AMOUNT, BM9.SOLUTION, RS.SOLUTION_NAME,
      BM9.ENT_ID, AE.ENT_NAME, AO.ORG_REGISTER_NO, RBT.BUDGET_SHORT_NAME, BM9.VIOLATION_FULLNAME, BM9.VIOLATION_POSITION, BM9.REALIZATION_AMOUNT, BM9.UNEXERCISED_AMOUNT, BM9.UNEXERCISED_DESC, BM9.CREATED_BY
      FROM AUD_STAT.NEW_BM9_DATA BM9
      INNER JOIN FAS_ADMIN.REF_PERIOD P ON BM9.PERIOD_ID = P.PERIOD_ID
      INNER JOIN AUD_STAT.REF_AUDIT_TYPE RAT ON BM9.AUDIT_TYPE_ID = RAT.AUDIT_TYPE_ID
      INNER JOIN AUD_STAT.REF_ERROR_CONFLICT REC ON BM9.IS_ERROR_CONFLICT = REC.ERROR_CONFLICT_ID
      INNER JOIN AUD_STAT.REF_SOLUTION RS ON BM9.SOLUTION = RS.SOLUTION_ID
      INNER JOIN AUD_ORG.AUDIT_ENTITY AE ON BM9.ENT_ID = AE.ENT_ID AND AE.IS_ACTIVE = 1
      INNER JOIN AUD_ORG.AUDIT_ORGANIZATION AO ON AE.ENT_ORG_ID = AO.ORG_ID AND AO.IS_ACTIVE = 1
      INNER JOIN AUD_ORG.REF_BUDGET_TYPE RBT ON AE.ENT_BUDGET_TYPE = RBT.BUDGET_TYPE_ID
      WHERE BM9.IS_ACTIVE = 1`;

      // if (!isCheckSchedule) {
      //   if (
      //     req.body.USER_TYPE_NAME === "ADMIN" ||
      //     req.body.USER_TYPE_NAME === "ALL_VIEWER" ||
      //     req.body.USER_TYPE_NAME === "STAT_ADMIN"
      //   ) {
      //   } else {
      //     params.P_USER_ID = parseInt(req.body.USER_ID, 10);
      //     ListQuery += `\n AND EXISTS (SELECT AUDITOR_ID FROM FAS_ADMIN.FAS_AUDIT_TEAM_DATA FATD2 WHERE ROLE_ID IN (2,3,4,5,6) AND FATD2.IS_ACTIVE = 1 AND FATD2.AUDITOR_ID = :P_USER_ID AND FATD2.FAS_AUDIT_ID = FA.ID )`;
      //   }
      // }

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9IU(req, res) {
    try {
      const queryBM9 = `BEGIN AUD_STAT.NEW_BM9_I_U(:P_ID, :P_PERIOD_ID, :P_AUDIT_TYPE_ID, :P_AUDIT_NAME, :P_AUDIT_CODE, :P_DELIVERED_DATE, :P_EXECUTION_DATE, :P_IS_ERROR_CONFLICT, :P_SHORT_DESC, :P_AMOUNT, :P_SOLUTION, :P_ENT_ID, :P_VIOLATION_FULLNAME, :P_VIOLATION_POSITION, :P_REALIZATION_AMOUNT, :P_UNEXERCISED_AMOUNT, :P_UNEXERCISED_DESC, :P_CREATED_BY); END;`;

      let data = {};

      function getData(req) {
        data = {
          P_ID: req.body.ID != null ? parseInt(req.body.ID) : null,
          P_PERIOD_ID: CheckNullInt(req.body.PERIOD_ID),
          P_AUDIT_TYPE_ID: CheckNullInt(req.body.AUDIT_TYPE_ID),
          P_AUDIT_NAME: req.body.AUDIT_NAME,
          P_AUDIT_CODE: req.body.AUDIT_CODE,
          P_DELIVERED_DATE: DateFormat(req.body.DELIVERED_DATE),
          P_EXECUTION_DATE: DateFormat(req.body.EXECUTION_DATE),
          P_IS_ERROR_CONFLICT: CheckNullInt(req.body.IS_ERROR_CONFLICT),
          P_SHORT_DESC: req.body.SHORT_DESC,
          P_AMOUNT: CheckNullFloat(req.body.AMOUNT),
          P_SOLUTION: CheckNullInt(req.body.SOLUTION),
          P_ENT_ID: CheckNullInt(req.body.ENT_ID),
          P_VIOLATION_FULLNAME: req.body.VIOLATION_FULLNAME,
          P_VIOLATION_POSITION: req.body.VIOLATION_POSITION,
          P_REALIZATION_AMOUNT: CheckNullFloat(req.body.REALIZATION_AMOUNT),
          P_UNEXERCISED_AMOUNT: CheckNullFloat(req.body.UNEXERCISED_AMOUNT),
          P_UNEXERCISED_DESC: req.body.UNEXERCISED_DESC,
          P_CREATED_BY: CheckNullInt(req.body.CREATED_BY),
        };
        return { data };
      }

      getData(req);

      const result = await OracleDB.simpleExecute(queryBM9, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9Remove(req, res) {
    try {
      const queryBM9Remove = `UPDATE AUD_STAT.NEW_BM9_DATA
      SET IS_ACTIVE = 0,
          REMOVE_DESC = :P_REMOVE_DESC,
          UPDATED_BY = :P_CREATED_BY,
          UPDATED_DATE = SYSDATE
      WHERE ID = :P_ID `;

      let data = {};

      data = {
        P_ID: parseInt(req.body.ID),
        P_REMOVE_DESC: req.body.REMOVE_DESC,
        P_CREATED_BY: parseInt(req.body.CREATED_BY),
      };

      const result = await OracleDB.simpleExecute(queryBM9Remove, data, {
        autoCommit: true,
      });
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM10List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ListQuery = `SELECT BM10.ID, BM1.ID BM1_ID, L.AUDIT_TYPE_NAME, L.AUDIT_ORG_CHECK_NAME, L.BUDGET_SHORT_NAME, BM10.EXPERT_TYPE_ID, ET.EXPERT_TYPE_NAME,
      BM10.EXPERT_NAME, BM10.DEPARTMENT_ID, RD.DEPARTMENT_NAME EXPERT_DEPARTMENT_NAME, 
      BM10.EXPERT_REASON_ID, ER.EXPERT_REASON_NAME, BM10.INVOLVED_DIRECTION, BM10.WORK_MOUNT, BM10.EXPERT_AMOUNT, BM10.AUDIT_AMOUNT
      FROM AUD_STAT.NEW_BM1_DATA BM1
      INNER JOIN AUD_STAT.NEW_BM1_LOG L ON L.BM1_ID = BM1.ID
      INNER JOIN FAS_ADMIN.FAS_AUDIT FA ON BM1.AUDIT_ID = FA.ID
      LEFT JOIN AUD_STAT.NEW_BM10_DATA BM10 ON BM10.BM1_ID = BM1.ID
      LEFT JOIN AUD_STAT.REF_EXPERT_TYPE ET ON BM10.EXPERT_TYPE_ID = ET.EXPERT_TYPE_ID
      LEFT JOIN AUD_ORG.REF_DEPARTMENT RD ON BM10.DEPARTMENT_ID = RD.DEPARTMENT_ID
      LEFT JOIN AUD_STAT.REF_EXPERT_REASON ER ON BM10.EXPERT_REASON_ID = ER.EXPERT_REASON_ID
      WHERE BM1.IS_ACTIVE = 1 AND BM1.IS_EXPERT_ATTEND = 1`;
      ListQuery += `\n AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID`;
      ListQuery += `\n ORDER BY BM1.ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM10IU(req, res) {
    try {
      const queryBM10 = `BEGIN AUD_STAT.NEW_BM10_I_U(:P_ID, :P_BM1_ID, :P_EXPERT_TYPE_ID, :P_EXPERT_NAME, :P_DEPARTMENT_ID, :P_EXPERT_REASON_ID, :P_INVOLVED_DIRECTION, :P_WORK_MOUNT, :P_EXPERT_AMOUNT, :P_AUDIT_AMOUNT, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_BM1_ID: CheckNullInt(element.BM1_ID),
              P_EXPERT_TYPE_ID: CheckNullInt(element.EXPERT_TYPE_ID),
              P_EXPERT_NAME: element.EXPERT_NAME,
              P_DEPARTMENT_ID: CheckNullInt(element.DEPARTMENT_ID),
              P_EXPERT_REASON_ID: CheckNullInt(element.EXPERT_REASON_ID),
              P_INVOLVED_DIRECTION: element.INVOLVED_DIRECTION,
              P_WORK_MOUNT: CheckNullInt(element.WORK_MOUNT),
              P_EXPERT_AMOUNT: CheckNullFloat(element.EXPERT_AMOUNT),
              P_AUDIT_AMOUNT: CheckNullFloat(element.AUDIT_AMOUNT),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM10, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM8AList(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      let params = {};

      let ListQuery = `SELECT BM8A.ID, BM8A.DEPARTMENT_ID, RD.DEPARTMENT_NAME, BM8A.SUB_DEPARTMENT_ID, SD.SUB_DEPARTMENT_NAME, BM8A.BUDGET_NAME, 
      BM8A.BUDGET_LEVEL_ID, BL.BUDGET_LEVEL_NAME, BM8A.CONCLUSION_FORM_ID, CF.CONCLUSION_FORM_NAME, BM8A.IS_REFLECT, 
      BM8A.CONCLUSION_TYPE_ID, CT.CONCLUSION_TYPE_NAME, BM8A.BENEFIT_TYPE_ID, BT.BENEFIT_TYPE_NAME, BM8A.BENEFIT_FIN_AMOUNT, BM8A.BENEFIT_NONFIN_AMOUNT
      FROM AUD_STAT.NEW_BM8A_DATA BM8A
      INNER JOIN AUD_ORG.REF_DEPARTMENT RD ON BM8A.DEPARTMENT_ID = RD.DEPARTMENT_ID
      LEFT JOIN AUD_HR.REF_SUB_DEPARTMENT SD ON BM8A.SUB_DEPARTMENT_ID = SD.SUB_DEPARTMENT_ID
      LEFT JOIN AUD_ORG.REF_BUDGET_LEVEL BL ON BM8A.BUDGET_LEVEL_ID = BL.BUDGET_LEVEL_ID
      LEFT JOIN AUD_STAT.REF_CONCLUSION_FORM CF ON BM8A.CONCLUSION_FORM_ID = CF.CONCLUSION_FORM_ID
      LEFT JOIN AUD_STAT.REF_CONCLUSION_TYPE CT ON BM8A.CONCLUSION_TYPE_ID = CT.CONCLUSION_TYPE_ID
      LEFT JOIN AUD_STAT.REF_BENEFIT_TYPE BT ON BM8A.BENEFIT_TYPE_ID = BT.BENEFIT_TYPE_ID
      WHERE BM8A.IS_ACTIVE = 1`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM8AIU(req, res) {
    try {
      const queryBM8A = `BEGIN AUD_STAT.NEW_BM8A_I_U(:P_ID, :P_DEPARTMENT_ID, :P_SUB_DEPARTMENT_ID, :P_BUDGET_NAME, :P_BUDGET_LEVEL_ID, :P_CONCLUSION_FORM_ID, :P_IS_REFLECT, :P_CONCLUSION_TYPE_ID, :P_BENEFIT_TYPE_ID, :P_BENEFIT_FIN_AMOUNT, :P_BENEFIT_NONFIN_AMOUNT, :P_CREATED_BY); END;`;

      let data = {};

      function getData(req) {
        data = {
          P_ID: req.body.ID != null ? parseInt(req.body.ID) : null,
          P_DEPARTMENT_ID: CheckNullInt(req.body.DEPARTMENT_ID),
          P_SUB_DEPARTMENT_ID: CheckNullInt(req.body.SUB_DEPARTMENT_ID),
          P_BUDGET_NAME: req.body.BUDGET_NAME,
          P_BUDGET_LEVEL_ID: CheckNullInt(req.body.BUDGET_LEVEL_ID),
          P_CONCLUSION_FORM_ID: CheckNullInt(req.body.CONCLUSION_FORM_ID),
          P_IS_REFLECT: CheckNullInt(req.body.IS_REFLECT),
          P_CONCLUSION_TYPE_ID: CheckNullInt(req.body.CONCLUSION_TYPE_ID),
          P_BENEFIT_TYPE_ID: CheckNullInt(req.body.BENEFIT_TYPE_ID),
          P_BENEFIT_FIN_AMOUNT: CheckNullFloat(req.body.BENEFIT_FIN_AMOUNT),
          P_BENEFIT_NONFIN_AMOUNT: CheckNullFloat(
            req.body.BENEFIT_NONFIN_AMOUNT
          ),
          P_CREATED_BY: CheckNullInt(req.body.CREATED_BY),
        };
        return { data };
      }

      getData(req);
      console.log(data);
      const result = await OracleDB.simpleExecute(queryBM8A, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM8ARemove(req, res) {
    try {
      const queryBM8ARemove = `UPDATE AUD_STAT.NEW_BM8A_DATA
      SET IS_ACTIVE = 0,
          REMOVE_DESC = :P_REMOVE_DESC,
          UPDATED_BY = :P_CREATED_BY,
          UPDATED_DATE = SYSDATE
      WHERE ID = :P_ID `;

      let data = {};

      data = {
        P_ID: parseInt(req.body.ID),
        P_REMOVE_DESC: req.body.REMOVE_DESC,
        P_CREATED_BY: parseInt(req.body.CREATED_BY),
      };

      const result = await OracleDB.simpleExecute(queryBM8ARemove, data, {
        autoCommit: true,
      });
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9AList(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      //params.P_PERIOD_ID = resultFindID.rows[0]?.PERIOD_ID;
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ListQuery = `SELECT BM9A.ID,
      BM9A.MOVEMENT_TYPE_ID, BM9A.MOVEMENT_SUB_TYPE_ID, BM9A.MOVEMENT_DATE,
      HR.*
      FROM AUD_STAT.NEW_BM9A_DATA BM9A
      RIGHT JOIN (SELECT 
      P.DEPARTMENT_ID, 
      D.DEPARTMENT_NAME,
      P.SUB_DEPARTMENT_ID, 
      SD.SUB_DEPARTMENT_NAME,
      E.EMP_CODE,
      RP.PERSON_ID,
      RP.PERSON_LASTNAME, 
      RP.PERSON_FIRSTNAME, 
      RP.PERSON_REGISTER_NO,
      RP.PERSON_BORNDATE,
      TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') PERSON_AGE,
      CASE WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') < 25 THEN '25 хүртэл'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') >= 25 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 29 THEN '25-29'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 29 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 34 THEN '29-34'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 34 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 39 THEN '35-39'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 39 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 44 THEN '40-44'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 44 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 49 THEN '45-49'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 49 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 54 THEN '50-54'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') > 54 AND TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') <= 59 THEN '55-59'
        WHEN TO_CHAR(SYSDATE,'yyyy') - TO_CHAR(RP.PERSON_BORNDATE, 'yyyy') >= 60 THEN '60-аас дээш'
        ELSE NULL END PERSON_AGE_CLASS,
      CASE WHEN RP.PERSON_GENDER = 1 THEN 'Эрэгтэй' WHEN RP.PERSON_GENDER = 2 THEN 'Эмэгтэй' ELSE NULL END PERSON_GENDER,
      SUR.EMP_SUB_ROLE_NAME,
      --TAB_DATE,
      EDU.EDUCATION_TYPE_SHORT_NAME,
      PP.PROFESSION_NAME
      FROM AUD_HR.REG_EMPLOYEE E
      INNER JOIN AUD_HR.REG_PERSON RP ON E.EMP_PERSON_ID = RP.PERSON_ID
      INNER JOIN AUD_HR.REG_POSITION P ON E.EMP_POSITION_ID = P.POSITION_ID
      INNER JOIN AUD_HR.REF_POSITION_LEVEL PL ON P.POSITION_LEVEL_ID = PL.POSITION_LEVEL_ID
      LEFT JOIN AUD_ORG.REF_DEPARTMENT D ON P.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.DEPARTMENT_TYPE = 1 AND D.IS_ACTIVE = 1
      LEFT JOIN AUD_HR.REF_SUB_DEPARTMENT SD ON P.SUB_DEPARTMENT_ID = SD.SUB_DEPARTMENT_ID
      LEFT JOIN AUD_HR.REF_EMP_SUB_ROLE SUR ON SUR.EMP_SUB_ROLE_ID = PL.EMP_SUB_ROLE_ID
      LEFT JOIN (SELECT A.PERSON_ID, ET.EDUCATION_TYPE_SHORT_NAME  
          FROM (SELECT PE.PERSON_ID, MAX(PE.EDUCATION_TYPE_ID) EDUCATION_TYPE_ID
              FROM AUD_HR.REG_PERSON_EDUCATION PE
              WHERE PE.IS_ACTIVE = 1
              GROUP BY PE.PERSON_ID) A
          LEFT JOIN AUD_HR.REF_EDUCATION_TYPE ET ON A.EDUCATION_TYPE_ID = ET.EDUCATION_TYPE_ID) EDU ON RP.PERSON_ID = EDU.PERSON_ID
      LEFT JOIN (SELECT PERSON_ID, MAX(PROFESSION_NAME) PROFESSION_NAME
          FROM AUD_HR.REG_PERSON_EDUCATION 
          WHERE IS_ACTIVE = 1 AND IS_PRIMARY = 1
          GROUP BY PERSON_ID) PP ON RP.PERSON_ID = PP.PERSON_ID
      WHERE PL.EMP_ROLE_ID IN (1,2,3) AND E.IS_ACTIVE = 1
      AND P.DEPARTMENT_ID = :P_DEPARTMENT_ID
      ORDER BY P.ORDER_NO, D.DEPARTMENT_NAME
      ) HR ON BM9A.PERSON_ID = HR.PERSON_ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },

  async BM9AIU(req, res) {
    try {
      const queryBM9A = `BEGIN AUD_STAT.NEW_BM9A_I_U(:P_ID, :P_PERSON_ID, :P_DEPARTMENT_ID, :P_DEPARTMENT_NAME, :P_SUB_DEPARTMENT_ID, :P_SUB_DEPARTMENT_NAME, :P_EMP_CODE, :P_PERSON_LASTNAME, :P_PERSON_FIRSTNAME, :P_PERSON_REGISTER_NO, :P_PERSON_BORNDATE, :P_PERSON_AGE, :P_PERSON_AGE_CLASS, :P_PERSON_GENDER, :P_EMP_SUB_ROLE_NAME, :P_TAB_YEAR, :P_EDUCATION_TYPE_SHORT_NAME, :P_PROFESSION_NAME, :P_MOVEMENT_TYPE_ID, :P_MOVEMENT_SUB_TYPE_ID, :P_MOVEMENT_DATE, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_PERSON_ID: CheckNullInt(element.PERSON_ID),
              P_DEPARTMENT_ID: CheckNullInt(element.DEPARTMENT_ID),
              P_DEPARTMENT_NAME: element.DEPARTMENT_NAME,
              P_SUB_DEPARTMENT_ID: CheckNullInt(element.SUB_DEPARTMENT_ID),
              P_SUB_DEPARTMENT_NAME: element.SUB_DEPARTMENT_NAME,
              P_EMP_CODE: element.EMP_CODE,
              P_PERSON_LASTNAME: element.PERSON_LASTNAME,
              P_PERSON_FIRSTNAME: element.PERSON_FIRSTNAME,
              P_PERSON_REGISTER_NO: element.PERSON_REGISTER_NO,
              P_PERSON_BORNDATE: DateFormat(element.PERSON_BORNDATE),
              P_PERSON_AGE: CheckNullInt(element.PERSON_AGE),
              P_PERSON_AGE_CLASS: CheckNullInt(element.PERSON_AGE_CLASS),
              P_PERSON_GENDER: element.PERSON_GENDER,
              P_EMP_SUB_ROLE_NAME: element.EMP_SUB_ROLE_NAME,
              P_EDUCATION_TYPE_SHORT_NAME: element.EDUCATION_TYPE_SHORT_NAME,
              P_PROFESSION_NAME: element.PROFESSION_NAME,
              P_MOVEMENT_TYPE_ID: CheckNullInt(element.MOVEMENT_TYPE_ID),
              P_MOVEMENT_SUB_TYPE_ID: CheckNullInt(
                element.MOVEMENT_SUB_TYPE_ID
              ),
              P_MOVEMENT_DATE: element.MOVEMENT_DATE,

              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM9A, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9BList(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      let params = {};

      let ListQuery = `SELECT BM9B.ID, BM9B.DEPARTMENT_ID, D.DEPARTMENT_NAME, BM9B.SUB_DEPARTMENT_ID, SD.SUB_DEPARTMENT_NAME, 
      BM9B.TRAIN_ENVIRONMENT_ID, TE.TRAIN_ENVIRONMENT_NAME, BM9B.TRAIN_CATEGORY_ID, TC.TRAIN_CATEGORY_NAME,  BM9B.TRAIN_DIRECTION_ID, TD.TRAIN_DIRECTION_NAME, 
      BM9B.TRAIN_NAME, BM9B.TRAIN_START_DATE, BM9B.TRAIN_END_DATE, BM9B.TRAIN_MINUTE, BM9B.TRAIN_PERSON_COUNT
      FROM AUD_STAT.NEW_BM9B_DATA BM9B
      INNER JOIN AUD_ORG.REF_DEPARTMENT D ON BM9B.DEPARTMENT_ID = D.DEPARTMENT_ID
      LEFT JOIN AUD_HR.REF_SUB_DEPARTMENT SD ON BM9B.SUB_DEPARTMENT_ID = SD.SUB_DEPARTMENT_ID
      LEFT JOIN AUD_STAT.REF_TRAIN_ENVIRONMENT TE ON BM9B.TRAIN_ENVIRONMENT_ID = TE.TRAIN_ENVIRONMENT_ID
      LEFT JOIN AUD_STAT.REF_TRAIN_CATEGORY TC ON BM9B.TRAIN_CATEGORY_ID = TC.TRAIN_CATEGORY_ID
      LEFT JOIN AUD_STAT.REF_TRAIN_DIRECTION TD ON BM9B.TRAIN_DIRECTION_ID = TD.TRAIN_DIRECTION_ID
      WHERE BM9B.IS_ACTIVE = 1`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9BIU(req, res) {
    try {
      const queryBM9B = `BEGIN AUD_STAT.NEW_BM9B_I_U(:P_ID, :P_DEPARTMENT_ID, :P_SUB_DEPARTMENT_ID, :P_TRAIN_ENVIRONMENT_ID, :P_TRAIN_CATEGORY_ID, :P_TRAIN_DIRECTION_ID, :P_TRAIN_NAME, :P_TRAIN_START_DATE, :P_TRAIN_END_DATE, :P_TRAIN_MINUTE, :P_TRAIN_PERSON_COUNT, :P_CREATED_BY); END;`;

      let data = {};

      function getData(req) {
        data = {
          P_ID: req.body.ID != null ? parseInt(req.body.ID) : null,
          P_DEPARTMENT_ID: CheckNullInt(req.body.DEPARTMENT_ID),
          P_SUB_DEPARTMENT_ID: CheckNullInt(req.body.SUB_DEPARTMENT_ID),
          P_TRAIN_ENVIRONMENT_ID: CheckNullInt(req.body.TRAIN_ENVIRONMENT_ID),
          P_TRAIN_CATEGORY_ID: CheckNullInt(req.body.TRAIN_CATEGORY_ID),
          P_TRAIN_DIRECTION_ID: CheckNullInt(req.body.TRAIN_DIRECTION_ID),
          P_TRAIN_NAME: req.body.TRAIN_NAME,
          P_TRAIN_START_DATE: DateFormat(req.body.TRAIN_START_DATE),
          P_TRAIN_END_DATE: DateFormat(req.body.TRAIN_END_DATE),
          P_TRAIN_MINUTE: CheckNullInt(req.body.TRAIN_MINUTE),
          P_TRAIN_PERSON_COUNT: CheckNullInt(req.body.TRAIN_PERSON_COUNT),
          P_CREATED_BY: CheckNullInt(req.body.CREATED_BY),
        };
        return { data };
      }

      getData(req);

      const result = await OracleDB.simpleExecute(queryBM9B, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9BRemove(req, res) {
    try {
      const queryBM9BRemove = `UPDATE AUD_STAT.NEW_BM9B_DATA
      SET IS_ACTIVE = 0,
          REMOVE_DESC = :P_REMOVE_DESC,
          UPDATED_BY = :P_CREATED_BY,
          UPDATED_DATE = SYSDATE
      WHERE ID = :P_ID `;

      let data = {};

      data = {
        P_ID: parseInt(req.body.ID),
        P_REMOVE_DESC: req.body.REMOVE_DESC,
        P_CREATED_BY: parseInt(req.body.CREATED_BY),
      };

      const result = await OracleDB.simpleExecute(queryBM9BRemove, data, {
        autoCommit: true,
      });
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9CList(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      const resultFindID = await OracleDB.simpleExecute(FindIDs, paramID);

      let params = {};
      params.P_DEPARTMENT_ID = resultFindID.rows[0]?.DEPARTMENT_ID;

      let ListQuery = `SELECT
      BM9C.ID, BM1.ID BM1_ID, NULL, L.AUDIT_TYPE_NAME, BM9C.DEPARTMENT_ID, D.DEPARTMENT_NAME, BM9C.SUB_DEPARTMENT_ID, SD.SUB_DEPARTMENT_NAME, 
      BM9C.ENT_ID, NVL(L.ENT_NAME, AE.ENT_NAME) ENT_NAME, L.AUDIT_CODE, 
      BM9C.PAGE_ABSTRACT_COUNT, BM9C.PAGE_MORE_COUNT, BM9C.PAGE_VISUAL_COUNT, 
      BM9C.PRINT_ABSTRACT_COUNT, BM9C.PRINT_MORE_COUNT, BM9C.PRINT_VISUAL_COUNT,
      BM9C.REPORTED_ABSTRACT_ID, BM9C.REPORTED_MORE_ID, BM9C.REPORTED_VISUAL_ID, BM9C.IS_ACTIVE
      FROM AUD_STAT.NEW_BM1_DATA BM1
      INNER JOIN AUD_STAT.NEW_BM1_LOG L ON L.BM1_ID = BM1.ID
      INNER JOIN FAS_ADMIN.FAS_AUDIT FA ON BM1.AUDIT_ID = FA.ID
      LEFT JOIN AUD_STAT.NEW_BM9C_DATA BM9C ON BM9C.BM1_ID = BM1.ID
      LEFT JOIN AUD_ORG.AUDIT_ENTITY AE ON BM9C.ENT_ID = AE.ENT_ID AND AE.IS_ACTIVE = 1
      LEFT JOIN AUD_ORG.REF_DEPARTMENT D ON BM9C.DEPARTMENT_ID = D.DEPARTMENT_ID
      LEFT JOIN AUD_HR.REF_SUB_DEPARTMENT SD ON BM9C.SUB_DEPARTMENT_ID = SD.SUB_DEPARTMENT_ID
      WHERE BM1.IS_ACTIVE = 1 AND BM1.IS_PRESS_REPORT = 1 AND FA.AUDIT_CHECK_DEP_ID = :P_DEPARTMENT_ID
      UNION
      SELECT BM9C.ID, BM1_ID, AUDIT_TYPE_ID, NULL, DEPARTMENT_ID, NULL, SUB_DEPARTMENT_ID, NULL, 
      ENT_ID, NULL, BM9C.AUDIT_CODE, 
      PAGE_ABSTRACT_COUNT, PAGE_MORE_COUNT, PAGE_VISUAL_COUNT, 
      PRINT_ABSTRACT_COUNT, PRINT_MORE_COUNT, PRINT_VISUAL_COUNT, 
      REPORTED_ABSTRACT_ID, REPORTED_MORE_ID, REPORTED_VISUAL_ID, IS_ACTIVE
      FROM AUD_STAT.NEW_BM9C_DATA BM9C
      WHERE BM1_ID IS NULL AND BM9C.DEPARTMENT_ID = :P_DEPARTMENT_ID`;
      //ListQuery += `\n ORDER BY BM1.ID`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM9CIU(req, res) {
    try {
      const queryBM9C = `BEGIN AUD_STAT.NEW_BM9C_I_U(:P_ID, :P_DEPARTMENT_ID, :P_SUB_DEPARTMENT_ID, :P_BM1_ID, :P_ENT_ID, :P_AUDIT_CODE, :P_PAGE_ABSTRACT_COUNT, :P_PAGE_MORE_COUNT, :P_PAGE_VISUAL_COUNT, :P_PRINT_ABSTRACT_COUNT, :P_PRINT_MORE_COUNT, :P_PRINT_VISUAL_COUNT, :P_REPORTED_ABSTRACT_ID, :P_REPORTED_MORE_ID, :P_REPORTED_VISUAL_ID, :P_IS_ACTIVE, :P_CREATED_BY); END;`;

      let data = [];

      function getData(req) {
        if (req.body.data?.length > 0) {
          req.body.data?.forEach((element) => {
            data.push({
              P_ID: element.ID != null ? parseInt(element.ID) : null,
              P_DEPARTMENT_ID: CheckNullInt(element.DEPARTMENT_ID),
              P_SUB_DEPARTMENT_ID: CheckNullInt(element.SUB_DEPARTMENT_ID),
              P_BM1_ID: CheckNullInt(element.BM1_ID),
              P_ENT_ID: CheckNullInt(element.ENT_ID),
              P_AUDIT_CODE: element.AUDIT_CODE,
              P_PAGE_ABSTRACT_COUNT: CheckNullInt(element.PAGE_ABSTRACT_COUNT),
              P_PAGE_MORE_COUNT: CheckNullInt(element.PAGE_MORE_COUNT),
              P_PAGE_VISUAL_COUNT: CheckNullInt(element.PAGE_VISUAL_COUNT),
              P_PRINT_ABSTRACT_COUNT: CheckNullInt(
                element.PRINT_ABSTRACT_COUNT
              ),
              P_PRINT_MORE_COUNT: CheckNullInt(element.PRINT_MORE_COUNT),
              P_PRINT_VISUAL_COUNT: CheckNullInt(element.PRINT_VISUAL_COUNT),
              P_REPORTED_ABSTRACT_ID: CheckNullInt(
                element.REPORTED_ABSTRACT_ID
              ),
              P_REPORTED_MORE_ID: CheckNullInt(element.REPORTED_MORE_ID),
              P_REPORTED_VISUAL_ID: CheckNullInt(element.REPORTED_VISUAL_ID),
              P_IS_ACTIVE: parseInt(element.IS_ACTIVE),
              P_CREATED_BY: parseInt(req.body.CREATED_BY),
            });
          });
        }
        return { data };
      }

      getData(req);

      const result = await OracleDB.multipleExecute(queryBM9C, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM11List(req, res) {
    try {
      let paramID = {};
      paramID.P_ID = parseInt(req.body.ID, 10);

      let params = {};

      let ListQuery = `SELECT BM11.ID, BM11.DEPARTMENT_ID, D.DEPARTMENT_NAME, BM11.SUB_DEPARTMENT_ID, SD.SUB_DEPARTMENT_NAME, 
      BM11.RECOMMENDATION_YEAR, BM11.EVENT_NAME, BM11.SHORT_DESC, BM11.INFO_TYPE_ID, IT.INFO_TYPE_NAME,
      BM11.IS_FULFILLMENT, BM11.RECOMMENDATION_TYPE_ID, RT.RECOMMENDATION_TYPE_NAME, BM11.DECIDED_COUNT, BM11.UNIMPLEMENTED_REASON
      FROM AUD_STAT.NEW_BM11_DATA BM11
      INNER JOIN AUD_ORG.REF_DEPARTMENT D ON BM11.DEPARTMENT_ID = D.DEPARTMENT_ID
      LEFT JOIN AUD_HR.REF_SUB_DEPARTMENT SD ON BM11.SUB_DEPARTMENT_ID = SD.SUB_DEPARTMENT_ID
      LEFT JOIN AUD_STAT.REF_INFO_TYPE IT ON BM11.INFO_TYPE_ID = IT.INFO_TYPE_ID
      LEFT JOIN AUD_STAT.REF_RECOMMENDATION_TYPE RT ON BM11.RECOMMENDATION_TYPE_ID = RT.RECOMMENDATION_TYPE_ID
      WHERE BM11.IS_ACTIVE = 1`;

      const result = await OracleDB.simpleExecute(ListQuery, params);
      const resultRole = await OracleDB.simpleExecute(ListTeamRole, paramID);
      const resultStatus = await OracleDB.simpleExecute(AuditStatus, paramID);

      return res.send({
        data: result.rows,
        role: resultRole.rows,
        status:
          resultStatus.rows[0] !== undefined ? resultStatus.rows[0] : null,
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM11IU(req, res) {
    try {
      const queryBM11 = `BEGIN AUD_STAT.NEW_BM11_I_U(:P_ID, :P_DEPARTMENT_ID, :P_SUB_DEPARTMENT_ID, :P_RECOMMENDATION_YEAR, :P_EVENT_NAME, :P_SHORT_DESC, :P_INFO_TYPE_ID, :P_IS_FULFILLMENT, :P_RECOMMENDATION_TYPE_ID, :P_DECIDED_COUNT, :P_UNIMPLEMENTED_REASON, :P_CREATED_BY); END;`;

      let data = {};

      function getData(req) {
        data = {
          P_ID: req.body.ID != null ? parseInt(req.body.ID) : null,
          P_DEPARTMENT_ID: CheckNullInt(req.body.DEPARTMENT_ID),
          P_SUB_DEPARTMENT_ID: CheckNullInt(req.body.SUB_DEPARTMENT_ID),
          P_RECOMMENDATION_YEAR: CheckNullInt(req.body.RECOMMENDATION_YEAR),
          P_EVENT_NAME: req.body.EVENT_NAME,
          P_SHORT_DESC: req.body.SHORT_DESC,
          P_INFO_TYPE_ID: CheckNullInt(req.body.INFO_TYPE_ID),
          P_IS_FULFILLMENT: CheckNullInt(req.body.IS_FULFILLMENT),
          P_RECOMMENDATION_TYPE_ID: CheckNullInt(
            req.body.RECOMMENDATION_TYPE_ID
          ),
          P_DECIDED_COUNT: CheckNullInt(req.body.DECIDED_COUNT),
          P_UNIMPLEMENTED_REASON: req.body.UNIMPLEMENTED_REASON,
          P_CREATED_BY: CheckNullInt(req.body.CREATED_BY),
        };
        return { data };
      }

      getData(req);

      const result = await OracleDB.simpleExecute(queryBM11, data);
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
  async BM11Remove(req, res) {
    try {
      const queryBM11Remove = `UPDATE AUD_STAT.NEW_BM11_DATA
      SET IS_ACTIVE = 0,
          REMOVE_DESC = :P_REMOVE_DESC,
          UPDATED_BY = :P_CREATED_BY,
          UPDATED_DATE = SYSDATE
      WHERE ID = :P_ID `;

      let data = {};

      data = {
        P_ID: parseInt(req.body.ID),
        P_REMOVE_DESC: req.body.REMOVE_DESC,
        P_CREATED_BY: parseInt(req.body.CREATED_BY),
      };

      const result = await OracleDB.simpleExecute(queryBM11Remove, data, {
        autoCommit: true,
      });
      return res.send({
        status: 200,
        message: "Хадгаллаа.",
      });
    } catch (err) {
      return errorFunction.saveErrorAndSend(req, res, err);
    }
  },
};
